(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{281:function(s,t,a){s.exports=a.p+"assets/img/13-2 分库、分表、分区结构图.4715f1aa.png"},339:function(s,t,a){s.exports=a.p+"assets/img/11-数据库优化成本.da9a3c13.png"},340:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-数据库垂直水平拆分.affc23c0.jpg"},341:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-InnoDB存储引擎内存结构.0128bfef.jpg"},342:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-InnoDB的缓存和文件.7117a2ee.jpg"},343:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-日志文件循环写.2deaa63b.png"},344:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-日志commit的三种方式.c0ff0982.png"},345:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-innodb存储结构.e6b20d5e.png"},346:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-InnoDB数据页的组成2.e40ce179.png"},347:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-page.6c399fa0.png"},348:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-Compact行记录的格式.3f9e98ac.png"},349:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-Compact记录头信息格式.546c0aac.png"},350:function(s,t,a){s.exports=a.p+"assets/img/11-1560994779063.2b04bac6.png"},351:function(s,t,a){s.exports=a.p+"assets/img/11-聚集索引.35039601.png"},352:function(s,t,a){s.exports=a.p+"assets/img/11-1560907290323.07594010.png"},353:function(s,t,a){s.exports=a.p+"assets/img/11-1560993470695.e6f0e81c.png"},354:function(s,t,a){s.exports=a.p+"assets/img/11-1560993817672.e935b966.png"},355:function(s,t,a){s.exports=a.p+"assets/img/11-1560993904422.1c3e62ff.png"},356:function(s,t,a){s.exports=a.p+"assets/img/13 读写分离-腾讯云架构图.1e34f652.png"},357:function(s,t,a){s.exports=a.p+"assets/img/13-2 分区.9f5f892b.png"},358:function(s,t,a){s.exports=a.p+"assets/img/12 snowflake算法.9f0d9656.png"},359:function(s,t,a){s.exports=a.p+"assets/img/11.3.1 qcloud-mysql-slow-sql.42045910.png"},360:function(s,t,a){s.exports=a.p+"assets/img/11.3.1 qcloud-mysql-monitor.f992ab1c.png"},361:function(s,t,a){s.exports=a.p+"assets/img/11.3.1-InnoDB存储引擎内存结构2.0128bfef.jpg"},631:function(s,t,a){"use strict";a.r(t);var e=a(14),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"一、介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、介绍"}},[s._v("#")]),s._v(" 一、介绍")]),s._v(" "),t("p",[s._v("数据库的优化可以从以下四个方面做，其效果跟投入成相反关系，即：")]),s._v(" "),t("p",[s._v("效果：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("SQL及索引 > 数据库表结构 > 系统配置 > 硬件\n")])])]),t("p",[s._v("成本：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("硬件 > 系统配置 > 数据库表结构 > SQL及索引\n")])])]),t("img",{attrs:{src:a(339),alt:"image-20240408132104452"}}),s._v(" "),t("p",[s._v("硬件不用说，当然是配置越高越好，最好是专门用于数据库的服务器，并采用ssd的，不过这个成本是最高的，我们主要讲解剩下3种的优化思路。当然MySQL的优化工作是持续进行的，并不是一次性完成。")]),s._v(" "),t("p",[s._v("我们可以在以下阶段持续进行优化，分别是")]),s._v(" "),t("ul",[t("li",[s._v("上线前产品的数据库设计（系统配置、数据库表结构、SQL及索引设计）")]),s._v(" "),t("li",[s._v("上线后的持续监控优化（慢查询、mysql指标监控）。")])]),s._v(" "),t("p",[s._v("当然，对于业务、产品的优化，并不单单只是针对MySQL进行优化，还可以通过其他方面来进行，例如缓存的应用。")]),s._v(" "),t("p",[s._v("整体的优化思路可以按照如下的原则逐步进行：")]),s._v(" "),t("ul",[t("li",[s._v("优先考虑通过缓存降低对数据库的读操作（如：redis）")]),s._v(" "),t("li",[s._v("再考虑读写分离，减轻数据库压力")]),s._v(" "),t("li",[s._v("首先考虑按照业务垂直拆分")]),s._v(" "),t("li",[s._v("再考虑水平拆分：先分库（设置数据路由规则，把数据分配到不同的库中）")]),s._v(" "),t("li",[s._v("再考虑分表，单表拆分到数据1000万以内")]),s._v(" "),t("li",[s._v("最后可以考虑分区，例如以用户名做hash分区")])]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(340)}}),s._v(" "),t("h2",{attrs:{id:"二、系统配置优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、系统配置优化"}},[s._v("#")]),s._v(" 二、系统配置优化")]),s._v(" "),t("p",[s._v("以下针对的InnoDB引擎的配置文件my.cnf：")]),s._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[s._v("[mysqld]\n# GENERAL\ndatadir = /var/lib/mysql\nsocket = /var/lib/mysql/mysql.sock\npid_file = /var/lib/mysql/mysql.pid\nuser = mysql\nport = 3306\n\n# INNODB\ninnodb_buffer_pool_size = "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\ninnodb_log_file_size = "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\ninnodb_file_per_table = 1\n\n# LOGGING\nslow_query_log = ON\nslow_query_log = /var/lib/mysql/mysql-slow.log\nlog_error = /var/lib/mysql/mysql-error.log\n\n# OTHER\ntmp_table_size = 32M\nmax_heap_table_size = 32M\n# 禁用缓存\nquery_cache_type = 0\nquery_cache_size = 0\nmax_connections = "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\nthread_cache_size = "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\nopen_files_limit = 65535\n\n[client]\nsocket = /var/lib/mysql/mysql.sock\nport = 3306\n")])])]),t("h3",{attrs:{id:"_1、innodb-buffer-pool-size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、innodb-buffer-pool-size"}},[s._v("#")]),s._v(" 1、innodb_buffer_pool_size")]),s._v(" "),t("blockquote",[t("p",[s._v("介绍")])]),s._v(" "),t("p",[s._v("InnoDB使用一个缓冲池来保存索引和原始数据，如下图所示：")]),s._v(" "),t("img",{staticStyle:{zoom:"67%"},attrs:{src:a(341),alt:"InnoDB存储引擎内存结构"}}),s._v(" "),t("blockquote",[t("p",[s._v("优缺点")])]),s._v(" "),t("p",[s._v("缓冲池的作用可以减少磁盘访问，我们知道内存读写速度比磁盘的读写速度快很多，所以这个参数对mysql性能有很大提升。当然，这里不是越大越好，也要考虑实际的服务器情况。总之，InnoDB严重依赖缓冲池，我们必须为它分配了足够的内存。")]),s._v(" "),t("p",[s._v("更大的缓冲池会使得mysql服务在重启和关闭的时候花费很长时间。")]),s._v(" "),t("blockquote",[t("p",[s._v("如何配置")])]),s._v(" "),t("p",[s._v("如果在一个独立使用的mysql服务器上，这个变量按照流行的经验法则，可以把缓冲池大小设置为服务器内存的约75%~80%。")]),s._v(" "),t("p",[s._v("但是，如果服务器上除了跑mysql服务，还有其他服务也在运行，那么在分配缓冲池空间时，需要减去这部分程序占用的内存、mysql自身需要的内存以及减去足够让操作系统缓存InnoDB日志文件的内存，至少是足够缓存最近经常访问的部分。")]),s._v(" "),t("h3",{attrs:{id:"_2、innodb-log-file-size和innodb-log-files-in-group"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、innodb-log-file-size和innodb-log-files-in-group"}},[s._v("#")]),s._v(" 2、innodb_log_file_size和innodb_log_files_in_group")]),s._v(" "),t("blockquote",[t("p",[s._v("介绍")])]),s._v(" "),t("p",[s._v("InnoDB使用日志来减少提交事务时的开销。")]),s._v(" "),t("p",[s._v("InnoDB用日志把随机I/O变成顺序I/O。")]),s._v(" "),t("img",{staticStyle:{zoom:"67%"},attrs:{src:a(342)}}),s._v(" "),t("p",[t("strong",[s._v("innodb_log_files_in_group")]),s._v(" 参数控制日志文件数，一般默认为2。mysql事务日志文件是循环覆写的，如下图：")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(343)}}),s._v(" "),t("blockquote",[t("p",[s._v("优缺点")])]),s._v(" "),t("p",[s._v("当一个日志文件写满后，innodb会自动切换到另一个日志文件，而且会触发数据库的checkpoint，这会导致innodb缓存脏页的小批量刷新，会明显降低innodb的性能。如果innodb_log_file_size设置太小，就会导致innodb频繁地checkpoint，导致性能降低。而如果设置太大，由于事务日志是顺序I/O，大大提高了I/O性能，但是在崩溃恢复InnoDB时，会导致恢复时间变长。")]),s._v(" "),t("p",[s._v("如果InnoDB数据表有频繁的写操作，那么选择合适的innodb_log_file_size值对提升MySQL性能很重要。")]),s._v(" "),t("blockquote",[t("p",[s._v("如何配置")])]),s._v(" "),t("p",[s._v("作为一个经验法则，日志文件的全部大小，应该足够容纳服务器一个小时的活动内容。方法如下：")]),s._v(" "),t("p",[s._v("首先，在业务高峰期，计算出1分钟写入事务日志（redo log）的量，然后评估出一个小时的redo log量：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 使用pager之后，执行命令只显示Log开头的\nmysql> pager grep Log\nPAGER set to 'grep Log'\nmysql> show engine innodb status\\G select sleep(60); show engine innodb status\\G;\nLog sequence number 3257464291\nLog flushed up to   3257464278\n1 row in set (0.00 sec)\n\n1 row in set (1 min 0.00 sec)\n\nLog sequence number 3257550399\nLog flushed up to   3257550399\n1 row in set (0.00 sec)\n")])])]),t("p",[s._v("Log sequence number是写入事务日志的总字节数，通过1分钟内两个值的差值，我们可以看到每分钟有多少KB日志写入到MySQL中（备注：该返回值是我环境下的，具体数值请参考自己环境的返回值）")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> nopager\nPAGER set to stdout\nmysql> select (3257550399-3257464291)/1024 as KB;\n+---------+\n| KB      |\n+---------+\n| 84.0898 |\n+---------+\n1 row in set (0.00 sec)\n")])])]),t("p",[s._v("那么，1小时的事务日志写入量为：84KB * 60 = 5040KB，约为5MB。")]),s._v(" "),t("p",[s._v("由于默认有两个日志文件，在日志组中，两个日志文件的大小是一致的。所以我们可以大约设置innodb_log_file_size=3M。")]),s._v(" "),t("h3",{attrs:{id:"_3、innodb-log-buffer-size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、innodb-log-buffer-size"}},[s._v("#")]),s._v(" 3、innodb_log_buffer_size")]),s._v(" "),t("p",[s._v("innodb_log_buffer_size可以控制日志缓冲区的大小。")]),s._v(" "),t("p",[s._v("通常不需要把日志缓冲区设置得非常大。推荐的范围是1MB~8MB，一般来说是足够了，MySQL默认是8MB。")]),s._v(" "),t("h3",{attrs:{id:"_4、innodb-flush-log-at-trx-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、innodb-flush-log-at-trx-commit"}},[s._v("#")]),s._v(" 4、innodb_flush_log_at_trx_commit")]),s._v(" "),t("blockquote",[t("p",[s._v("介绍")])]),s._v(" "),t("p",[s._v("MySQL支持用户自定义在commit时如何将log buffer中的日志刷到log file中。这种控制通过变量：innodb_flush_log_at_trx_commit 来决定，该变量有：0、1、2三种值，默认为1。注意，这个变量只是控制commit动作是否刷新log buffer到磁盘中。")]),s._v(" "),t("ul",[t("li",[s._v("设置为0。把日志缓冲写到日志文件中，并且每秒钟刷新一次，但是事务提交时不做任何事，该设置是3者中性能最好的。也就是说设置为0时是(大约)每秒刷新写入到磁盘中的，当系统崩溃，会丢失1秒钟的数据。")]),s._v(" "),t("li",[s._v("设置为1。将日志缓冲写入到日志文件，并且每次事务提交都刷新到持久化存储。这是默认的设置（并且是最安全的），该设置能保证不会丢失任何已经提交的事务。")]),s._v(" "),t("li",[s._v("设置为2。每次提交时把日志缓冲写到日志文件，但并不刷新。InnoDB每秒钟做一次刷新。")])]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(344)}}),s._v(" "),t("blockquote",[t("p",[s._v("如何配置")])]),s._v(" "),t("p",[s._v("日志缓冲必须被刷新到持久化存储（磁盘），以确保提交的事务完全被持久化了。如果和持久化相比更在乎性能，则可以修改该参数来控制日志缓冲刷新的频繁程度。")]),s._v(" "),t("h3",{attrs:{id:"_5、thread-cache-size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、thread-cache-size"}},[s._v("#")]),s._v(" 5、thread_cache_size")]),s._v(" "),t("blockquote",[t("p",[s._v("介绍")])]),s._v(" "),t("p",[s._v("线程缓存保存哪些当前没有与连接关联但是准备为后面新的连接服务的线程。当一个新的链接创建时，如果缓存中有线程存在，MySQL从缓存中删除一个线程，并且把它分配给这个新的连接。当连接关闭时，如果线程缓存还有空间的话，MySQL又会把线程放回缓存。如果没有空间的话，MySQL就会销毁这个线程。")]),s._v(" "),t("p",[s._v("只要MySQL在缓存中还有空闲的线程，它就可以迅速地响应连接请求，因为这样就不用为每个连接创建新的线程。")]),s._v(" "),t("blockquote",[t("p",[s._v("如何配置")])]),s._v(" "),t("p",[s._v("thread_cache_size指定了MySQL可以保存在缓存中的线程数。一般不需要配置这个值，除非服务器会有很多连接请求。")]),s._v(" "),t("p",[s._v("一般，可以根据机器的内存进行设置：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1G  —> 8  ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2G  —> 16  ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3G  —> 32  ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 大于3G  —> 64或更大 ")]),s._v("\n")])])]),t("h3",{attrs:{id:"_6、tmp-table-size和max-heap-table-size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、tmp-table-size和max-heap-table-size"}},[s._v("#")]),s._v(" 6、tmp_table_size和max_heap_table_size")]),s._v(" "),t("blockquote",[t("p",[s._v("介绍")])]),s._v(" "),t("p",[s._v("tmp_table_size：临时表的内存缓存大小，临时表是指sql执行时生成的临时数据表。在优化sql时，应该尽量避免临时表。\nmax_heap_table_size：该参数也会影响到临时表的内存缓存大小。在增加tmp_table_size的同时，也需要增加max_heap_table_size的大小。")]),s._v(" "),t("blockquote",[t("p",[s._v("如何配置")])]),s._v(" "),t("p",[s._v("可以通过Created_tmp_disk_tables和Created_tmp_tables状态来分析是否需要增加tmp_table_size和max_heap_table_size。")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#Created_tmp_disk_tables : 磁盘临时表的数量\n#Created_tmp_tables      : 内存临时表的数量\n\nmysql> show global status like 'Created_tmp_disk_tables';\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 15668 |\n+-------------------------+-------+\n1 row in set (0.00 sec)\n\nmysql> show global status like 'Created_tmp_tables';\n+--------------------+--------+\n| Variable_name      | Value  |\n+--------------------+--------+\n| Created_tmp_tables | 737670 |\n+--------------------+--------+\n1 row in set (0.00 sec)\n")])])]),t("h3",{attrs:{id:"_7、max-connections"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、max-connections"}},[s._v("#")]),s._v(" 7、max_connections")]),s._v(" "),t("blockquote",[t("p",[s._v("介绍")])]),s._v(" "),t("p",[s._v("MySQL的max_connections参数用来设置最大连接数。如果该参数设置太小，会导致出现“Too many connections”的错误。")]),s._v(" "),t("p",[s._v("如果服务器的并发连接请求量比较大，建议提高此值，以增加并行连接数量。但是这个是要建立在机器的性能能支撑的情况下，因为MySQL会为每一个连接提供连接缓冲区，如果并发连接数量太高，会导致消耗内存过多。")]),s._v(" "),t("blockquote",[t("p",[s._v("如何配置")])]),s._v(" "),t("p",[s._v("如何判断max_connections设置的是否合理？")]),s._v(" "),t("p",[s._v("首先，查看最大连接上限：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like 'max_connections';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_connections | 1000  |\n+-----------------+-------+\n")])])]),t("p",[s._v("然后，可以查看服务器响应的最大连接数：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'max_used_connections';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| Max_used_connections | 3     |\n+----------------------+-------+\n")])])]),t("p",[s._v("可见，服务器历史最大连接数远远低于mysql服务器允许的最大连接上限。")]),s._v(" "),t("p",[s._v("对于mysql服务器最大连接上限的设置范围，最理想的是：服务器响应的最大连接数值占服务器上限连接数值的比例值在10%以上，如果在10%以下，说明mysql服务器最大连接上限值设置过高。")]),s._v(" "),t("h2",{attrs:{id:"三、数据库表结构设计优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、数据库表结构设计优化"}},[s._v("#")]),s._v(" 三、数据库表结构设计优化")]),s._v(" "),t("h3",{attrs:{id:"_1、innodb逻辑存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、innodb逻辑存储结构"}},[s._v("#")]),s._v(" 1、InnoDB逻辑存储结构")]),s._v(" "),t("p",[s._v("InnoDB所有数据都存放在一个叫表空间（tablespace）的地方（ibdata1）。表空间由段（segment）、区（extent）、页（page）组成。InnoDB逻辑存储存储结构如下图：")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(345),alt:"1560834709696"}}),s._v(" "),t("p",[s._v("注意，如果用户启用了参数innodb_file_per_table，则每张表内的数据（包括数据、索引和插入缓冲Bitmap页）可以单独放到一个表空间内，但是其他数据，如回滚信息、插入缓冲索引页、系统事务信息等还是存放在原来的共享表空间内。")]),s._v(" "),t("h4",{attrs:{id:"_1-段-segment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-段-segment"}},[s._v("#")]),s._v(" （1）段（segment）")]),s._v(" "),t("p",[s._v("常见的段有数据段、索引段、回滚段等")]),s._v(" "),t("h4",{attrs:{id:"_2-区-extent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-区-extent"}},[s._v("#")]),s._v(" （2）区（extent）")]),s._v(" "),t("p",[s._v("区是由连续的页组成的空间，每个区大小都为1MB。为了保证区中页的连续性，InnoDB存储引擎一次从磁盘中申请4~5个区。在默认情况下，InnoDB存储引擎页大小为16KB，即一个区中一共有64个连续的页。")]),s._v(" "),t("h4",{attrs:{id:"_3-页-page"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-页-page"}},[s._v("#")]),s._v(" （3）页（page）")]),s._v(" "),t("p",[s._v("页是InnoDB磁盘管理的最小单位，默认每个页大小为16KB。常见的页类型有：")]),s._v(" "),t("ul",[t("li",[s._v("数据页(B-tree Node)")]),s._v(" "),t("li",[s._v("undo页(undo Log Page)")]),s._v(" "),t("li",[s._v("系统页(System Page)")]),s._v(" "),t("li",[s._v("事务数据页(Transaction system Page)")]),s._v(" "),t("li",[s._v("插入缓冲位图页(Insert Buffer Bitmap)")]),s._v(" "),t("li",[s._v("插入缓冲空闲列表页(Insert Buffer Free List)")]),s._v(" "),t("li",[s._v("未压缩的二进制大对象页(Uncompressed BLOB Page)")]),s._v(" "),t("li",[s._v("压缩的二进制大对象页(compressed BLOB Page)")])]),s._v(" "),t("p",[s._v("这里重点将数据也的存储结构，该类型存放的是表中行的实际数据。")]),s._v(" "),t("p",[s._v("InnoDB数据也由以下7个部分组成，如下：")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(346),alt:"1560657805690"}}),s._v(" "),t("ul",[t("li",[t("p",[s._v("File Header用来记录页的一些头信息")])]),s._v(" "),t("li",[t("p",[s._v("Page Header用来记录数据页的状态信息")])]),s._v(" "),t("li",[t("p",[s._v("每个页中都有两个虚拟行记录，用来限定记录的边界：Infimum和Supremum Record，如下：")])])]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(347),alt:"1560836385634"}}),s._v(" "),t("ul",[t("li",[s._v("User Record是实际存储行记录的内容。")]),s._v(" "),t("li",[s._v("Page Directory存放了记录的相对位置，这些记录指针也称为Slots（槽）。在Slots中记录按照索引键值顺序存放，这样可以利用二叉查找迅速找到记录的指针。")]),s._v(" "),t("li",[s._v("File Trailer用于检测页是否完整地写入磁盘")])]),s._v(" "),t("h4",{attrs:{id:"_4-行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-行"}},[s._v("#")]),s._v(" （4）行")]),s._v(" "),t("p",[s._v("InnoDB存储引擎是按行进行存放的。"),t("code",[s._v("一个页中存放的行数据越多，其性能越高，这也是为什么创建字段的时候应该按照最小可用原则")]),s._v("。\nInnoDB存储引擎提供了Compact和Redundant两种格式来存放行记录数据，默认设置为Compact行格式。可以通过如下命令查看：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show table status like 't_ci_sessions'\\G;\n*************************** 1. row ***************************\n           Name: t_ci_sessions\n         Engine: InnoDB\n        Version: 10\n     Row_format: Compact\n           Rows: 9\n Avg_row_length: 1820\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 16384\n      Data_free: 0\n Auto_increment: NULL\n    Create_time: 2019-06-10 13:04:27\n    Update_time: NULL\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options: \n        Comment: \n1 row in set (0.00 sec)\n")])])]),t("p",[s._v("Compact行记录格式：")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(348),alt:"1560655448122"}}),s._v(" "),t("p",[s._v("Compact记录头信息的格式如下：")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(349),alt:"1560655619940"}}),s._v(" "),t("p",[s._v("数据库表结构设计原则如下：")]),s._v(" "),t("ul",[t("li",[s._v("尽量避免过度设计，例如设计极其复杂查询的schema设计，或者有很多列的表设计")]),s._v(" "),t("li",[s._v("使用小而简单的合适数据类型，除非真实数据模型中有确切的需要，否则应该尽可能地避免使用NULL值")]),s._v(" "),t("li",[s._v("尽量使用相同的数据类型存储相似的值，尤其是要在关联条件中使用的列")]),s._v(" "),t("li",[s._v("注意可变长字符串，其在临时表和排序时可能导致悲观的按最大长度分配内存")]),s._v(" "),t("li",[s._v("尽量使用整形定义标识列")]),s._v(" "),t("li",[s._v("小心使用ENUM和SET，最好避免使用BIT")]),s._v(" "),t("li",[s._v("范式是好的，但是反范式有时也是必须的，并且能带来好处。预先计算、缓存或生成汇总表也可能获得大的好处")]),s._v(" "),t("li",[s._v("ALTER TABLE是让人痛苦的操作，因为大部分情况下，它都会锁表并且重建整张表。 解决方法有两种：一种是在一台不提供服务的机器上执行ALTER TABLE操作，然后和提供服务的主库进行切换；另一种方法是“影子拷贝”，即用要求的表结构创建一张和源表无关的新表，然后通过重命名和删表操作交换两张表")]),s._v(" "),t("li",[s._v("在查找表时采用整数逐渐而避免采用基于字符串的值进行关联")])]),s._v(" "),t("h2",{attrs:{id:"四、索引设计优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、索引设计优化"}},[s._v("#")]),s._v(" 四、索引设计优化")]),s._v(" "),t("p",[t("strong",[s._v("关键原则：通过分层缩小数据范围，提高数据区分度，扫描的记录数就越少。例如主键ID做索引，只有唯一一个，数据区分度最高。如果用例如性别做索引，则数据范围还是很大，数据区分度不高，索引效果就很差。")])]),s._v(" "),t("p",[s._v("InnoDB存储引擎支持以下几种常见索引：")]),s._v(" "),t("ul",[t("li",[s._v("B+树索引")]),s._v(" "),t("li",[s._v("全文索引")]),s._v(" "),t("li",[s._v("哈希索引")])]),s._v(" "),t("p",[s._v("这里我们重点介绍B+树索引，也是使用最频繁的。")]),s._v(" "),t("p",[s._v("B+树索引，可以分为聚集索引（clustered index）和辅助索引（secondary index）。两者区别是，叶子节点存放的是否一整行的信息。")]),s._v(" "),t("h3",{attrs:{id:"_1、数据结构和算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、数据结构和算法"}},[s._v("#")]),s._v(" 1、数据结构和算法")]),s._v(" "),t("p",[s._v("B+树索引是目前关系型数据库系统中查找最为常用和最为有效的索引。B+树索引类似于二叉树，根据键值快速找到数据。")]),s._v(" "),t("p",[s._v("注意，B+树本身不一定找到具体的一条记录，能找到的只是该记录所在的页。数据库把页加载到内存，然后通过Page Directory再进行二分查找。")]),s._v(" "),t("h4",{attrs:{id:"_1-二分查找法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-二分查找法"}},[s._v("#")]),s._v(" （1）二分查找法")]),s._v(" "),t("p",[s._v("也叫折半查找法。详细算法原理不展开讲，网上有很多，可以查看："),t("a",{attrs:{href:"%5Bhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%5D(https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95)"}},[s._v("二分查找法")])]),s._v(" "),t("p",[s._v("这里为什么要介绍二分查找法，是因为：")]),s._v(" "),t("p",[s._v("我们知道每个数据页中包含Page Directory，Page Directory中的槽是按照主键的顺序存放的，对于某一条具体记录的查询是通过对Page Directory进行二分查找法得到的。也就是说，通过B+树索引定位到具体页以后，就需要引用二分查找法定位具体的键值。")]),s._v(" "),t("h4",{attrs:{id:"_2-二叉查找树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-二叉查找树"}},[s._v("#")]),s._v(" （2）二叉查找树")]),s._v(" "),t("p",[t("a",{attrs:{href:"%5Bhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9%5D(https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9)"}},[s._v("二叉查找树")]),s._v("的原理，请自行查阅。")]),s._v(" "),t("h4",{attrs:{id:"_3-平衡二叉树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-平衡二叉树"}},[s._v("#")]),s._v(" （3）平衡二叉树")]),s._v(" "),t("p",[t("a",{attrs:{href:"%5Bhttps://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%5D(https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91)"}},[s._v("平衡二叉树")]),s._v("的原理，请自行查阅。")]),s._v(" "),t("h4",{attrs:{id:"_4-b-树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-b-树"}},[s._v("#")]),s._v(" （4）B+树")]),s._v(" "),t("p",[s._v("如下是一颗B+索引树，如果主键是按照顺序递增地，则新插入的数据只需追加到末尾或生成新的叶子节点即可，不会对前面的节点造成修改。而假如主键是随机并非递增的，则新插入的主键有可能需要插入到之前的叶子节点中，这就可能导致叶子节点的分裂以及B+树的重新平衡，这造成的代价是比较大的。"),t("code",[s._v("这也是为什么主键索引建议顺序递增，而不建议采用类似md5作为主键或索引")]),s._v("。")]),s._v(" "),t("p",[s._v("​    同样的，删除或者修改操作都会导致B+树进行重新平衡，也需要付出一定的代价。"),t("code",[s._v("所以，使用索引，对于查询是非常友好的，可以极大提高速度，但是对于增、删、改操作者成本变高")]),s._v("。")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(350),alt:"1560994779063"}}),s._v(" "),t("h3",{attrs:{id:"_2、聚集索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、聚集索引"}},[s._v("#")]),s._v(" 2、聚集索引")]),s._v(" "),t("p",[s._v("InnoDB的聚集索引实际上在同一个结构中保存了B-Tree索引和数据行，一个表只能有一个聚集索引。")]),s._v(" "),t("p",[s._v("如下图，聚集索引，叶子页包含了行的全部数据，但节点页只包含索引列。")]),s._v(" "),t("img",{attrs:{src:a(351),alt:"image-20240408132208997"}}),s._v(" "),t("h3",{attrs:{id:"_3、辅助索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、辅助索引"}},[s._v("#")]),s._v(" 3、辅助索引")]),s._v(" "),t("p",[s._v("辅助索引也称为非聚集索引，叶子节点并不包含行记录的全部数据。每个叶子节点除了索引列还包含主键列，通过这个主键列就可以找到一个完整的行记录。也就是说，通过辅助索引，除了首先要在辅助索引树中查找到主键，还需要在聚集索引树中通过该主键找到对应的完整行数据所在的页。这也是为什么辅助索引需要进行两次索引查找的原因。")]),s._v(" "),t("p",[s._v("如下图所示：")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(352),alt:"1560907290323"}}),s._v(" "),t("h3",{attrs:{id:"_4、例子说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、例子说明"}},[s._v("#")]),s._v(" 4、例子说明")]),s._v(" "),t("p",[s._v("如下表，我们有一个主键col1以及三个索引。假设主键取值为1~10000，按随机顺序插入并使用OPTIMIZE TABLE命令做优化。col2和col3随机赋值，数据如下表所示。")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CREATE TABLE layout_test (\n    id int NOT NULL,\n    col2 varchar(16) NOT NULL DEFAULT '',\n    col3 varchar(16) NOT NULL DEFAULT '',\n    PRIMARY KEY(id),\n    KEY(col2),\n    KEY(col3)\n);\n")])])]),t("table",[t("thead",[t("tr",[t("th",[s._v("行号")]),s._v(" "),t("th",[s._v("id")]),s._v(" "),t("th",[s._v("col2")]),s._v(" "),t("th",[s._v("col3")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("0")]),s._v(" "),t("td",[s._v("99")]),s._v(" "),t("td",[s._v("Tom")]),s._v(" "),t("td",[s._v("apple")])]),s._v(" "),t("tr",[t("td",[s._v("1")]),s._v(" "),t("td",[s._v("12")]),s._v(" "),t("td",[s._v("Mary")]),s._v(" "),t("td",[s._v("banana")])]),s._v(" "),t("tr",[t("td",[s._v("2")]),s._v(" "),t("td",[s._v("3000")]),s._v(" "),t("td",[s._v("John")]),s._v(" "),t("td",[s._v("milk")])]),s._v(" "),t("tr",[t("td",[s._v("...")]),s._v(" "),t("td",[s._v("...")]),s._v(" "),t("td",[s._v("...")]),s._v(" "),t("td",[s._v("...")])]),s._v(" "),t("tr",[t("td",[s._v("9997")]),s._v(" "),t("td",[s._v("18")]),s._v(" "),t("td",[s._v("Judi")]),s._v(" "),t("td",[s._v("tea")])]),s._v(" "),t("tr",[t("td",[s._v("9998")]),s._v(" "),t("td",[s._v("4700")]),s._v(" "),t("td",[s._v("Tom")]),s._v(" "),t("td",[s._v("apple")])]),s._v(" "),t("tr",[t("td",[s._v("9999")]),s._v(" "),t("td",[s._v("3")]),s._v(" "),t("td",[s._v("Peter")]),s._v(" "),t("td",[s._v("coffee")])])])]),s._v(" "),t("p",[s._v("聚集索引叶子节点分布如下图所示（按id排序）：")]),s._v(" "),t("img",{staticStyle:{zoom:"67%"},attrs:{src:a(353),alt:"1560993470695"}}),s._v(" "),t("p",[s._v("以col2为索引列的辅助索引叶子节点分布图（按col2排序）：")]),s._v(" "),t("img",{staticStyle:{zoom:"67%"},attrs:{src:a(354),alt:"1560993817672"}}),s._v(" "),t("p",[s._v("以col3为索引列的辅助索引叶子节点分布图（按col3排序）：")]),s._v(" "),t("img",{staticStyle:{zoom:"67%"},attrs:{src:a(355),alt:"1560993904422"}}),s._v(" "),t("blockquote",[t("p",[s._v("覆盖索引")])]),s._v(" "),t("p",[s._v("严格地说，覆盖索引只是辅助索引的一个衍生定义，即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。使用覆盖索引的一个好处是辅助索引不包含整行记录的所有信息，所以它要比聚集索引小很多，因此一页包含的辅助索引数量更多，从而可以减少大量的IO操作。")]),s._v(" "),t("h3",{attrs:{id:"_5、总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、总结"}},[s._v("#")]),s._v(" 5、总结")]),s._v(" "),t("p",[s._v("设计和使用索引时，可以遵循以下原则：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("选择数据类型遵循小而简单的原则，这样做的好处是可以节省索引空间，对于较短的键值，索引页中能容纳更多的键值，这样查找速度也会提升。下表是mysql各个字段类型的大小和使用范围：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("字段")]),s._v(" "),t("th",[s._v("存储大小(单位：字节)")]),s._v(" "),t("th",[s._v("最小值")]),s._v(" "),t("th",[s._v("最大值")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("TINYINT")]),s._v(" "),t("td",[s._v("1")]),s._v(" "),t("td",[s._v("-128")]),s._v(" "),t("td",[s._v("127")])]),s._v(" "),t("tr",[t("td",[s._v("SMALLINT")]),s._v(" "),t("td",[s._v("2")]),s._v(" "),t("td",[s._v("-32768")]),s._v(" "),t("td",[s._v("32767")])]),s._v(" "),t("tr",[t("td",[s._v("MEDIUMINT")]),s._v(" "),t("td",[s._v("3")]),s._v(" "),t("td",[s._v("-8,388,608")]),s._v(" "),t("td",[s._v("8,388,607 (838萬)")])]),s._v(" "),t("tr",[t("td",[s._v("INT")]),s._v(" "),t("td",[s._v("4")]),s._v(" "),t("td",[s._v("-2,147,483,648")]),s._v(" "),t("td",[s._v("2,147,483,647 (21億)")])]),s._v(" "),t("tr",[t("td",[s._v("BIGINT")]),s._v(" "),t("td",[s._v("8")]),s._v(" "),t("td",[s._v("-9,223,372,036,854,775,808")]),s._v(" "),t("td",[s._v("9,223,372,036,854,775,807 (922京)")])]),s._v(" "),t("tr",[t("td",[s._v("FLOAT")]),s._v(" "),t("td",[s._v("4")]),s._v(" "),t("td",[s._v("-3.402823466E+38")]),s._v(" "),t("td",[s._v("3.402823466E+38")])]),s._v(" "),t("tr",[t("td",[s._v("DOUBLE")]),s._v(" "),t("td",[s._v("8")]),s._v(" "),t("td",[s._v("-1.7976931348623157E+308")]),s._v(" "),t("td",[s._v("1.7976931348623157E+308")])]),s._v(" "),t("tr",[t("td",[s._v("DECIMAL*")]),s._v(" "),t("td",[s._v("每9个数字4个字节")]),s._v(" "),t("td",[s._v("~ -1E+66")]),s._v(" "),t("td",[s._v("~ 1E+66")])]),s._v(" "),t("tr",[t("td",[s._v("TIMESTAMP")]),s._v(" "),t("td",[s._v("4")]),s._v(" "),t("td",[s._v("1970（unix时间戳）")]),s._v(" "),t("td",[s._v("2038（unix时间戳）")])]),s._v(" "),t("tr",[t("td",[s._v("DATETIME")]),s._v(" "),t("td",[s._v("8")]),s._v(" "),t("td",[s._v("1001年")]),s._v(" "),t("td",[s._v("9999年")])])])]),s._v(" "),t("p",[s._v("所以，如果存储IP地址，使用UNSIGNED INT存储，刚好够用，比使用字符串占用更少空间，搜索更快。")]),s._v(" "),t("p",[s._v("同样的。而时间使用DATETIME存储，比使用字符串（19字节）足足少了11字节。")])]),s._v(" "),t("li",[t("p",[s._v("整形数据比起字符，处理开销更小，在MySQL中，建议使用内置的日期和时间数据类型，而不是用字符串来存储时间。")])]),s._v(" "),t("li",[t("p",[s._v("利用覆盖索引进行查询，避免回表。Explain返回的Using index就代表从索引中查询。这也是为什么要避免使用SELECT *的原因之一。")])]),s._v(" "),t("li",[t("p",[s._v("尽量指定列为NOT NULL，NULL会使索引、索引统计和值更加复杂，并且需要额外的存储空间。这个可以查看这篇文章"),t("a",{attrs:{href:"https://my.oschina.net/leejun2005/blog/1342985",target:"_blank",rel:"noopener noreferrer"}},[s._v("《一千个不用NULL的理由》"),t("OutboundLink")],1),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("建议在选择性高的列上建立索引，最好是唯一索引，区分度越大，则我们扫描的记录数越少，例如性别区分度不大，就不适合做索引。")])]),s._v(" "),t("li",[t("p",[s._v("更新非常频繁的数据不适合建索引。频繁更新会导致变更B+索引树，重建索引，这个过程很消耗数据库性能。")])]),s._v(" "),t("li",[t("p",[s._v("利用最左前缀原则，比如建立一个联合索引(a,b,c)，我们可以利用的索引就有(a),(a,b),(a,b,c)")])]),s._v(" "),t("li",[t("p",[s._v("如果确定有多少条数据，使用limit限制一下，MySQL在查找到对应条数的数据的时候，会停止继续查找")])]),s._v(" "),t("li",[t("p",[s._v("删除不再使用的索引")])]),s._v(" "),t("li",[t("p",[s._v("join语法，尽量将小的表放在前面，在需要on的字段上，数据类型保持一致，并设置素银，否则MySQL无法使用索引来Join查询")])]),s._v(" "),t("li",[t("p",[s._v('like "xxx%"可以用到索引，like"%xxx%"则不行')])]),s._v(" "),t("li",[t("p",[s._v("在设计开发阶段，数据库字段的定义要避免出现由数据类型定义不当造成的隐式转换")])])]),s._v(" "),t("h2",{attrs:{id:"五、sql查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、sql查询优化"}},[s._v("#")]),s._v(" 五、SQL查询优化")]),s._v(" "),t("h3",{attrs:{id:"_1、分解关联查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、分解关联查询"}},[s._v("#")]),s._v(" 1、分解关联查询")]),s._v(" "),t("p",[s._v("很多高性能的应用都会对关联查询进行分解。简单地，可以对每一个表进行一次单表查询，然后将结果都再应用程序中进行管理。如下这个查询:")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> SELECT * FROM tag\n     -> JOIN tag_post ON tag_post.tag_id=tag.id\n     -> JOIN post ON tag_post.post_id=post.id\n     -> WHERE tag.tag='mysql;\n")])])]),t("p",[s._v("可以分解成下面这些查询来代替：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> SELECT * FROM tag WHERE tag='mysql';\nmysql> SELECT * FROM tag_post WHERE tag_id=1234;\nmysql> SELECT * FROM post WHERE post.id in (123,456,567,9098,8904);\n")])])]),t("p",[s._v("用分解关联查询的方式重构查询有如下的优势：")]),s._v(" "),t("ul",[t("li",[s._v("让缓存的效率更高。")]),s._v(" "),t("li",[s._v("将查询分解后，执行单个查询可以减少锁的竞争。")]),s._v(" "),t("li",[s._v("在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可扩展。")]),s._v(" "),t("li",[s._v("查询效率也有可能会有所提升。")]),s._v(" "),t("li",[s._v("可以减少冗余记录的查询。")]),s._v(" "),t("li",[s._v("更进一步，这样做相当于在应用层中实现了哈希关联，而不是是使用MySQL的嵌套循环关联。")])]),s._v(" "),t("h3",{attrs:{id:"_2、优化count-查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、优化count-查询"}},[s._v("#")]),s._v(" 2、优化COUNT()查询")]),s._v(" "),t("p",[s._v("count()可以统计某个列值的数量，也可以统计行数。")]),s._v(" "),t("p",[s._v("一个常见的错误是，在括号内指定了一个列却希望统计结果集的行数。如果希望知道的是结果集的行数，最好使用COUNT(*)，这样写意义清晰，性能也会很好。")]),s._v(" "),t("p",[s._v("一般，COUNT都需扫描大量的行才能获得精确的结果，因此很难优化。在MySQL层面还能做的就只有索引覆盖扫描（不回表查询）。如果这样还不能满足，就需要考虑修改应用架构或者增加缓存（如redis）统计。")]),s._v(" "),t("h3",{attrs:{id:"_3、关联查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、关联查询优化"}},[s._v("#")]),s._v(" 3、关联查询优化")]),s._v(" "),t("ul",[t("li",[s._v("确保ON或者USING子句的列上有索引。一般来说，除非有其他理由，否则只需要在关联顺序中的第二个表的相应列上创建索引")]),s._v(" "),t("li",[s._v("确保任何GROUP BY和ORDER BY中的表达式值涉及到一个表中的列，这样MySQL才有可能使用索引来优化这个过程。")])]),s._v(" "),t("h3",{attrs:{id:"_4、优化子查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、优化子查询"}},[s._v("#")]),s._v(" 4、优化子查询")]),s._v(" "),t("p",[s._v("关于子查询优化，建议就是尽可能使用关联查询代替。")]),s._v(" "),t("h3",{attrs:{id:"_5、优化group-by和distinct"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、优化group-by和distinct"}},[s._v("#")]),s._v(" 5、优化GROUP BY和DISTINCT")]),s._v(" "),t("ul",[t("li",[s._v("如果需要对关联查询做分组（GROUP BY)，并且是按照查找表中的某个列进行分组，那么通常采用查找表的主键分组的效率比其他列更高。")]),s._v(" "),t("li",[s._v("如果没有通过ORDER BY子句显示地指定排序列，当查询使用GROUP BY子句的时候，结果集会自动按照分组的字段进行排序。如果不关心结果集的顺寻，而这种默认又导致了需要文件排序，则可以使用ORDER BY NULL，让MySQL不再进行文件排序。")])]),s._v(" "),t("h3",{attrs:{id:"_6、优化limit分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、优化limit分页"}},[s._v("#")]),s._v(" 6、优化LIMIT分页")]),s._v(" "),t("p",[s._v("一个非常常见的问题是，在偏移量很大的时候，例如：limit 10000,20这样的查询，MySQL需要查询10020条记录后只返回最后20条，前面10000条记录都将被抛弃，这样代价非常高。针对这个问题，有以下几个方法：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("最简单的办法就是尽可能地使用覆盖扫描，而不是查询所有的列。")]),s._v(" "),t("p",[s._v("例如下面的查询：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> SELECT file_id,description FROM sakila.film ORDER BY title LIMIT 50,5\n")])])]),t("p",[s._v("如果表数据非常大，可以改成如下:")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> SELECT file_id,description FROM sakila.film\n    -> INNER JOIN(\n    ->    SELECT file_id FROM sakila.film ORDER BY title LIMIT 50,5    \n    ) AS lim USING(film_id);\n")])])]),t("p",[s._v("这里“延迟关联”大大提高了查询效率，它让MySQL扫描尽可能少的页面，获取需要访问的记录后在根据关联列回原表查询需要的所有列")])]),s._v(" "),t("li",[t("p",[s._v("可以记录上次取数据的主键ID位置，那么下次就可以直接从该记录的位置开始扫描，这样就可以避免OFFSET导致MySQL扫描大量不需要的行然后抛弃掉。")]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> SELECT * FROM sakila.rental ORDER BY rental_id DESC LIMIT 20;\n")])])]),t("p",[s._v("假如上面的查询返回的是主键为16049到16030的记录，那么下一页查询就可以从16030这个点开始：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> SELECT * FROM sakila.rental WHERE rental_id < 16030 ORDER BY rental_id DSEC LIMIT 20;\n")])])]),t("p",[s._v("该技术的好处是，无论翻页到多么后面，性能都会很好。")])])]),s._v(" "),t("h3",{attrs:{id:"_7、优化union查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、优化union查询"}},[s._v("#")]),s._v(" 7、优化UNION查询")]),s._v(" "),t("ul",[t("li",[s._v("MySQL总是通过创建并填充临时表的方式来执行UNION查询。在UNION查询优化中，经常需要手工地将WHERE,LIMIT,ORDER BY等子句下推到UNION的各个子查询中，一边优化器可以充分利用这些条件进行优化。")]),s._v(" "),t("li",[s._v("除非确实需要服务器消除重复的行，否则就一定要使用UNION ALL。如果没有ALL关键字，MySQL会给临时表加上DISTINCT选项，这回导致对整个临时表的数据做唯一性检查，代价很高。")])]),s._v(" "),t("h2",{attrs:{id:"六、读写分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、读写分离"}},[s._v("#")]),s._v(" 六、读写分离")]),s._v(" "),t("p",[s._v("读写分离是数据库架构中的一种常见模式，主要是为了解决数据库的性能瓶颈。读写分离的基本原理是将读操作和写操作分开，分别发送到不同的服务器上执行，从而提高数据库的处理能力和性能。")]),s._v(" "),t("p",[s._v("在MySQL中，实现读写分离架构通常使用主从复制技术。主从复制技术是指设置一个主数据库（Master）和一个或多个从数据库（Slave）。主数据库处理所有的写操作（INSERT、UPDATE、DELETE），从数据库处理所有的读操作（SELECT）。主数据库在处理完写操作后，会把数据的变更记录到二进制日志（Binary Log）中，然后从数据库通过复制线程将这些变更同步到自己的数据库中。")]),s._v(" "),t("h3",{attrs:{id:"物理层设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#物理层设计"}},[s._v("#")]),s._v(" 物理层设计")]),s._v(" "),t("p",[s._v("下面是实现MySQL读写分离架构的步骤：")]),s._v(" "),t("ol",[t("li",[s._v("配置主数据库")])]),s._v(" "),t("p",[s._v("在主数据库的配置文件（my.cnf或my.ini）中，需要开启二进制日志，并设置一个唯一的服务器ID。例如：")]),s._v(" "),t("div",{staticClass:"language-ini extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("mysqld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("log-bin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("mysql-bin")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("server-id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1")]),s._v("\n")])])]),t("p",[s._v("然后重启MySQL服务使配置生效。")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("配置从数据库")])]),s._v(" "),t("p",[s._v("在从数据库的配置文件中，也需要设置一个唯一的服务器ID（不能和主数据库的ID相同）。例如：")]),s._v(" "),t("div",{staticClass:"language-ini extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token section"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("mysqld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("server-id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("2")]),s._v("\n")])])]),t("p",[s._v("然后重启MySQL服务使配置生效。")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("在主数据库中创建一个用于复制的用户，并授权：")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("GRANT REPLICATION SLAVE ON *.* TO 'replica'@'%' IDENTIFIED BY 'password';\nFLUSH PRIVILEGES;\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("在从数据库中配置主数据库的信息：")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("CHANGE MASTER "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TO")]),s._v("\n  MASTER_HOST"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'master_host'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  MASTER_USER"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'replica'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  MASTER_PASSWORD"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'password'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  MASTER_LOG_FILE"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mysql-bin.000001'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  MASTER_LOG_POS"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("然后启动从数据库的复制线程：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("START")]),s._v(" SLAVE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("以上就是实现MySQL读写分离架构的基本步骤。在应用程序中，需要根据操作类型（读或写）将数据库请求发送到相应的数据库服务器（主或从）。这通常可以通过数据库中间件或连接池来实现。")]),s._v(" "),t("p",[s._v("需要注意的是，读写分离架构虽然可以提高数据库性能，但也会带来数据一致性的问题。因为主从数据库的数据同步是有延迟的，如果一个写操作后立即进行读操作，可能会读到旧的数据。因此，对数据一致性要求很高的系统需要谨慎使用读写分离架构。")]),s._v(" "),t("p",[s._v("当然，如果使用云计算产品，例如腾讯云、阿里云等云上的CDB产品，他们本身就自带支持设置读写分离以及异地的架构。")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(356),alt:"image-20231212131722216"}}),s._v(" "),t("h3",{attrs:{id:"应用层设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用层设计"}},[s._v("#")]),s._v(" 应用层设计")]),s._v(" "),t("p",[s._v("要通过数据库中间件实现读写分离，首先需要创建一个中间件，该中间件可以拦截数据库请求，并根据请求类型（读或写）将请求路由到不同的数据库服务器（主或从）。在Golang中，可以使用"),t("code",[s._v("database/sql")]),s._v("包来实现这个中间件。")]),s._v(" "),t("p",[s._v("以下是使用Golang实现一个简单的读写分离中间件的示例：")]),s._v(" "),t("ol",[t("li",[s._v("安装Golang的MySQL驱动：")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("go get "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-u")]),s._v(" github.com/go-sql-driver/mysql\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("创建一个名为"),t("code",[s._v("dbmiddleware.go")]),s._v("的文件，实现读写分离中间件：")])]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"database/sql"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"strings"')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"github.com/go-sql-driver/mysql"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" DBMiddleware "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    master "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sql"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("DB\n    slave  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sql"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("DB\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewDBMiddleware")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("masterDSN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" slaveDSN "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("DBMiddleware"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" sql"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mysql"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" masterDSN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Errorf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to connect to master: %w"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    slave"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" sql"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mysql"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" slaveDSN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Errorf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to connect to slave: %w"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("DBMiddleware"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        slave"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("  slave"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dbm "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("DBMiddleware"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sql"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" dbm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dbm "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("DBMiddleware"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Query")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sql"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Rows"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isWriteOperation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" dbm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Query")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" dbm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("slave"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Query")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isWriteOperation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 简单判断是否为写操作，实际项目中应该更严格地检查SQL语句")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("HasPrefix")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ToUpper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TrimSpace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"INSERT"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("\n        strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("HasPrefix")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ToUpper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TrimSpace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"UPDATE"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("\n        strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("HasPrefix")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ToUpper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TrimSpace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"DELETE"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 示例代码，使用DBMiddleware进行读写操作")]),s._v("\n    dbm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewDBMiddleware")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"user:password@tcp(master_host:3306)/dbname"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"user:password@tcp(slave_host:3306)/dbname"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error:"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 写操作")]),s._v("\n    result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" dbm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"INSERT INTO users (name, age) VALUES (?, ?)"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error:"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Insert result:"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 读操作")]),s._v("\n    rows"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" dbm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Query")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SELECT * FROM users"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error:"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defer")]),s._v(" rows"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Close")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" rows"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n        err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rows"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Scan")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error:"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"User: id=%d, name=%s, age=%d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("在这个示例中，我们创建了一个名为"),t("code",[s._v("DBMiddleware")]),s._v("的结构体，它包含两个"),t("code",[s._v("*sql.DB")]),s._v("对象，分别表示主数据库和从数据库。然后，我们实现了"),t("code",[s._v("Exec")]),s._v("和"),t("code",[s._v("Query")]),s._v("方法，分别用于执行写操作和读操作。在"),t("code",[s._v("Query")]),s._v("方法中，我们根据SQL语句是否为写操作，将请求路由到主数据库或从数据库。")]),s._v(" "),t("p",[s._v("需要注意的是，这个示例中的"),t("code",[s._v("isWriteOperation")]),s._v("函数只是一个简单的判断，实际项目中应该更严格地检查SQL语句。此外，这个示例没有考虑连接池、错误处理和事务等高级功能。在实际项目中，应该根据需求进行相应的扩展和优化。")]),s._v(" "),t("h2",{attrs:{id:"七、分库、分表、分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、分库、分表、分区"}},[s._v("#")]),s._v(" 七、分库、分表、分区")]),s._v(" "),t("p",[s._v("为了适应大数据量（亿级别）的业务场景，需要对架构进行分层设计，这里采用类似地图的分层理念：国家->省份->城市->镇->乡。")]),s._v(" "),t("p",[s._v("分层越多，具体到最底层的级别，数据量的级别就下降越多，查询速度就越快。")]),s._v(" "),t("p",[s._v("我们这里就采用三层结构")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(281),alt:"image-20230925093329669"}}),s._v(" "),t("h3",{attrs:{id:"第一层-分库-按业务分db"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一层-分库-按业务分db"}},[s._v("#")]),s._v(" 第一层：分库（按业务分db）")]),s._v(" "),t("p",[s._v("这里可以根据实际的业务模块进行数据库的划分，可以避免一个业务的数据量过大导致影响到其他业务的数据库查询。")]),s._v(" "),t("p",[s._v("具体到实际的操作划分，有几种方案可以参考：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("一种是根据业务模块将数据分布到不同的数据库中")]),s._v(" "),t("p",[s._v("例如，您可以将用户信息、订单信息、商品信息等分别存储在不同的数据库中。这样可以降低单个数据库的压力，提高系统的可扩展性。")]),s._v(" "),t("p",[s._v("示例：")]),s._v(" "),t("ul",[t("li",[s._v("用户库：存储用户相关信息，如用户基本信息、用户登录记录等；")]),s._v(" "),t("li",[s._v("订单库：存储订单相关信息，如订单详情、支付记录等；")]),s._v(" "),t("li",[s._v("商品库：存储商品相关信息，如商品基本信息、库存信息等。")])])]),s._v(" "),t("li",[t("p",[s._v("根据URL的访问路径进行路由来划分db，例如：")]),s._v(" "),t("p",[s._v("http://xxxx.com/v1/api/workspace_id/execution/xxx")])])]),s._v(" "),t("p",[s._v("​   可以对/v1/api/workspace_id进行路由区分到不同db")]),s._v(" "),t("p",[s._v("​   如下，我们把数据库中数据量最大的appinst表和execution表分离出来，剩下的其他表由于数据量比较少就放在同一个数据库里。")]),s._v(" "),t("p",[s._v("而对于不同的业务，可以使用不同的数据库来存储appinst表和execution表。")]),s._v(" "),t("p",[s._v("​    当用户访问workflow数据时，就去总表查询，如果想要访问具体的execution和appinst执行数据，则要根据前面的访问路径进行路由到某个数据库上。")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(357),alt:"image-20230926230635018"}}),s._v(" "),t("h3",{attrs:{id:"第二层-分表-按周分表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二层-分表-按周分表"}},[s._v("#")]),s._v(" 第二层：分表（按周分表）")]),s._v(" "),t("p",[s._v("对于访问量较大的数据表，可以按照时间维度进行分表，例如按周分表操作。这样可以减少单表的数据量，提高查询效率。")]),s._v(" "),t("p",[s._v("我们用上一节snowflake雪花算法生成的uid作为execution_xx和appinst_xx表的主键。")]),s._v(" "),t("p",[s._v("同时，表明的命名格式如下：")]),s._v(" "),t("blockquote",[t("p",[s._v("execution_年周，例如今天是2023年9月，则是第39周，那么execution表名为：execuiton_202339\nappinst_年周，例如今天是2023年9月，则是第39周，那么appinst表名为：appinst_202339")])]),s._v(" "),t("p",[s._v("根据雪花算法的生成原理，我们知道雪花算法的第二部分是毫秒时间戳。通过这个时间戳我们可以知道对应数据存储到哪一张表里。")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:a(358),alt:"img"}}),s._v(" "),t("p",[s._v("这种根据每周来对表明进行划分，需要对下一周的表提前创建。")]),s._v(" "),t("p",[s._v("例如下面的分表方式：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show tables;\n+-------------+\n| Tables_in_test|\n+-----------+\n| tb_202013 |\n| tb_202014 |\n| tb_202015 |\n| tb_202016 |\n| tb_202017 |\n| tb_202018 |\n| tb_202019 |\n| tb_202020 |\n| tb_202021 |\n| tb_202022 |\n| tb_202023 |\n| tb_202024 |\n| tb_202025 |\n| tb_202026 |\n| tb_202027 |\n| tb_202028 |\n| tb_202029 |\n| tb_202030 |\n+-----------+\n")])])]),t("p",[s._v("然后再按照表中某个字段，如手机号、用户id去hash分区：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CREATE TABLE `tb_202013` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `username` varchar(20) DEFAULT NULL,\n  `telephone` int(10) NOT NULL DEFAULT '0'\n  //...\n) ENGINE=InnoDB AUTO_INCREMENT=202013278841900 DEFAULT CHARSET=utf8\n/*!50100 PARTITION BY HASH (telephone)\nPARTITIONS 4 */ |\n")])])]),t("h3",{attrs:{id:"第三层-分区-按用户名做hash分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三层-分区-按用户名做hash分区"}},[s._v("#")]),s._v(" 第三层：分区（按用户名做hash分区）")]),s._v(" "),t("p",[s._v("MySQL的分区是一种将数据分散到多个独立的物理分区的数据库设计方案。分区表现得就像一个普通的MySQL表，但实际上，它是由多个子表（分区）组成的，每个分区包含表的一部分数据。分区可以基于多种方式，比如按照范围、列表、哈希或键进行。")]),s._v(" "),t("p",[s._v("分区能提高查询和写入效率的原因主要有以下几点：")]),s._v(" "),t("ol",[t("li",[s._v("分区剪枝（Partition Pruning）：当执行查询时，MySQL能够确定只从一个或少数几个分区中检索数据，而不是全表扫描。这大大减少了查询所需检查的数据量，从而提高查询速度。")]),s._v(" "),t("li",[s._v("并行执行：在某些情况下，如果查询涉及多个分区，MySQL可以并行地从每个分区检索数据，从而提高查询速度。")]),s._v(" "),t("li",[s._v("数据管理：通过分区，可以更容易地管理数据。例如，可以通过删除一个分区来快速地删除大量数据，这比删除表中的行要快得多。")]),s._v(" "),t("li",[s._v("I/O吞吐量：如果分区位于不同的物理设备上，可以利用更多的硬件并行性来提高查询速度，因为I/O操作可以在多个设备上并行进行。")]),s._v(" "),t("li",[s._v("写入效率：对于插入和更新操作，如果它们能够定位到特定的分区，那么这些操作只会锁定该分区，而不会影响到其他分区，从而提高并发性能。")])]),s._v(" "),t("p",[s._v("所以，分区可以提高大型表的查询性能，简化大量数据的管理，并可能提高多用户并发性能。但是，分区并不总是适用，对于小型表或不符合分区策略的查询，分区可能不会带来性能提升，甚至可能导致性能下降。因此，是否使用分区需要根据具体情况来决定。")]),s._v(" "),t("p",[s._v("例如，可以将用户表按照用户ID的hash值进行分区，将数据分布到不同的表空间中。")]),s._v(" "),t("p",[s._v("示例，用户表：将用户表按照用户ID的hash值分为多个分区，如 user_partition_1, user_partition_2, user_partition_3...，每个分区存储一部分用户数据。")]),s._v(" "),t("p",[s._v("MySQL支持以下几种分区方式：")]),s._v(" "),t("h4",{attrs:{id:"range分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#range分区"}},[s._v("#")]),s._v(" RANGE分区")]),s._v(" "),t("p",[s._v("基于给定列的连续范围值进行分区。例如，按日期范围分区。")]),s._v(" "),t("p",[s._v("创建RANGE分区的示例：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" orders "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  order_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  user_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  order_date "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" RANGE "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("order_date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p0 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2010")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p3 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN MAXVALUE\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("这个示例中，orders表按照order_date的年份进行RANGE分区，分为4个分区。分区p0包含2000年以前的数据，分区p1包含2000-2009年的数据，分区p2包含2010-2019年的数据，分区p3包含2020年及以后的数据。")]),s._v(" "),t("p",[s._v("使用EXPLAIN分析查询：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" order_date "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2010-01-01'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" order_date "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2019-12-31'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" select_type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" partitions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" possible_keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" key_len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ref  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" filtered "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Extra       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SIMPLE")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" orders "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" p2         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" warning "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.01")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("在查询结果中，可以看到MySQL只会扫描分区p2，因为它知道这个时间范围的数据只存在于这个分区中。这就是分区剪枝，它可以提高查询性能。")]),s._v(" "),t("h4",{attrs:{id:"list分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list分区"}},[s._v("#")]),s._v(" LIST分区")]),s._v(" "),t("p",[s._v("基于给定列的离散值列表进行分区。例如，按国家/地区代码分区。")]),s._v(" "),t("p",[s._v("创建LIST分区的示例：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" users "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  user_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  user_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  country_code "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  country_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" RANGE "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("country_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p_us "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p_uk "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p_other "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN MAXVALUE\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("在这个示例中，我们为每个国家/地区分配了一个整数ID（例如，'US'为1，'UK'为2，'OTHER'为3）。然后我们根据country_id进行RANGE分区。")]),s._v(" "),t("p",[s._v("使用EXPLAIN分析查询：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" country_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" select_type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" partitions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" possible_keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" key_len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ref  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" filtered "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Extra       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SIMPLE")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" users "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" p_us       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" warning "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.01")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("在查询结果中，可以看到MySQL只会扫描分区p_us，因为它知道美国用户的数据只存在于这个分区中。")]),s._v(" "),t("h4",{attrs:{id:"hash分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash分区"}},[s._v("#")]),s._v(" HASH分区")]),s._v(" "),t("p",[s._v("基于给定列的哈希值进行分区。这种分区方式可以实现均匀的数据分布。")]),s._v(" "),t("p",[s._v("创建HASH分区的示例：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" products "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  product_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  product_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  price "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DECIMAL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HASH")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("product_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nPARTITIONS "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("这个示例中，products表按照product_id的哈希值进行分区，分为4个分区。数据将根据product_id的哈希值均匀分布在这4个分区中。")]),s._v(" "),t("p",[s._v("使用EXPLAIN分析查询：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" products "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" product_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" select_type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" partitions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" possible_keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" key_len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ref  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" filtered "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Extra       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SIMPLE")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" products "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" p0         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" warning "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("在查询结果中，可以看到MySQL会根据product_id的哈希值定位到一个特定的分区p0，然后只扫描这个分区。")]),s._v(" "),t("h4",{attrs:{id:"key分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key分区"}},[s._v("#")]),s._v(" KEY分区")]),s._v(" "),t("p",[s._v("类似于HASH分区，但是使用MySQL的内置哈希函数进行分区。当分区键是字符串时，这种分区方式比HASH分区更高效。")]),s._v(" "),t("p",[s._v("创建KEY分区的示例：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" sessions "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  session_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  user_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  login_time "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATETIME")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("session_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nPARTITIONS "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("这个示例中，sessions表按照session_id的哈希值进行分区，分为4个分区。数据将根据session_id的哈希值均匀分布在这4个分区中。")]),s._v(" "),t("p",[s._v("使用EXPLAIN分析查询：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPLAIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" sessions "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" session_id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abcdef1234567890abcdef1234567890'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" select_type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" partitions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" possible_keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" key_len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ref  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" filtered "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Extra       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SIMPLE")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" sessions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" p0         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" warning "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.01")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("在查询结果中，可以看到MySQL会根据session_id的哈希值定位到分区p0，然后只扫描这个分区。")]),s._v(" "),t("p",[s._v("综上，可以根据实际业务需求和数据量进行分库、分表、分区的设计。同时，还需要注意以下几点：")]),s._v(" "),t("ol",[t("li",[s._v("在进行数据库架构优化时，需要考虑数据迁移和同步的问题，确保数据的一致性和完整性。")]),s._v(" "),t("li",[s._v("在应用层，需要实现相应的路由策略，将请求分发到正确的数据库、表和分区中。")]),s._v(" "),t("li",[s._v("需要定期对数据库进行监控和维护，以确保系统的稳定性和性能。")])]),s._v(" "),t("h2",{attrs:{id:"八、上线后监控优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、上线后监控优化"}},[s._v("#")]),s._v(" 八、上线后监控优化")]),s._v(" "),t("p",[s._v("MySQL数据库上线后，可以等其稳定运行一段时间后再根据服务器的status装填进行适当优化，可以用如下命令列出MySQL服务器运行的各种状态值。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 查询所有状态值\nshow global status;\n# 查询具体某个状态值\nshow status like '%xx%';\n")])])]),t("p",[t("em",[t("strong",[s._v("从我实际的线上系统运维经验来看，CDB上线后的监控最最重要的还是监控慢查询日志，及时发现慢查询SQL并优化修复，可以解决很多问题。大部分时候，我们碰到的CDB高负载，很多是因为慢查询语句堆积导致的。")])])]),s._v(" "),t("p",[s._v("如果使用的是云厂商的CDB产品，可以直接使用他们的慢查询日志查询功能：")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(359),alt:"image-20240930172141978"}}),s._v(" "),t("p",[s._v("现在很多云厂商的CDB在这方面的监控已经做得非常好了，下面是某个云厂商CDB的监控，但是如果自建CDB的话就需要自己去关注各种指标。")]),s._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:a(360),alt:"image-20240930171813511"}}),s._v(" "),t("h3",{attrs:{id:"_1、慢查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、慢查询"}},[s._v("#")]),s._v(" 1、慢查询")]),s._v(" "),t("p",[s._v("为了定位系统中效率比较低下的查询语句，需要通过慢查询日志来定位：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like '%slow%';\n+---------------------------+---------------------------------------------+\n| Variable_name             | Value                                       |\n+---------------------------+---------------------------------------------+\n| log_slow_admin_statements | OFF                                         |\n| log_slow_slave_statements | OFF                                         |\n| slow_launch_time          | 2                                           |\n| slow_query_log            | ON                                          |\n| slow_query_log_file       | /data1/mysql_root/data/20144/slow_query.log |\n+---------------------------+---------------------------------------------+\n")])])]),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like '%slow%';\n+---------------------+-------+\n| Variable_name       | Value |\n+---------------------+-------+\n| Slow_launch_threads | 0     |\n| Slow_queries        | 18014 |\n+---------------------+-------+\n")])])]),t("p",[s._v("一个好的性能分析工具，能很好地提高数据库性能的管理效率，而pt-query-diget就是专门针对MySQL数据库慢查询的一个分析工具，相比于官方的mysqldumpslow，这个工具分析结果更加具体完善。")]),s._v(" "),t("h4",{attrs:{id:"_1-pt-query-digest工具安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-pt-query-digest工具安装"}},[s._v("#")]),s._v(" （1）pt-query-digest工具安装")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装最新的 percona release package")]),s._v("\nyum "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" https://repo.percona.com/yum/percona-release-latest.noarch.rpm\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装 percona toolkit")]),s._v("\nyum "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" percona-toolkit\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 验证 pt-queyr-digest 是否可以使用")]),s._v("\npt-query-digest "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--help")]),s._v("\n")])])]),t("h4",{attrs:{id:"_2-慢查询日志分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-慢查询日志分析"}},[s._v("#")]),s._v(" （2）慢查询日志分析")]),s._v(" "),t("p",[s._v("首先获取MySQL服务器上慢查询日志的路径：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like '%slow_query_log%';\n+---------------------+----------------------+\n| Variable_name       | Value                |\n+---------------------+----------------------+\n| slow_query_log      | ON                   |\n| slow_query_log_file | /data/mysql/slow.log |\n+---------------------+----------------------+\n")])])]),t("p",[s._v("然後通過pt-query-digest工具分析下，看看是否有什么问题：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" pt-query-digest --report /data/mysql/slow.log  /data/mysql/report.log \n")])])]),t("p",[s._v("分析报告分为三部分：")]),s._v(" "),t("h5",{attrs:{id:"第一部分-总体统计结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一部分-总体统计结果"}},[s._v("#")]),s._v(" 第一部分：总体统计结果")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 700ms user time, 20ms system time, 27.61M rss, 214.82M vsz")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Current date: Mon Jun 10 09:13:13 2019")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Hostname: VM_16_17_centos")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Files: /data/mysql/slow.log")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Overall: 3.24k total, 12 unique, 0.01 QPS, 0.01x concurrency ___________")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Time range: 2019-06-03 13:18:15 to 2019-06-08 17:25:52")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Attribute          total     min     max     avg     95%  stddev  median")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ============     ======= ======= ======= ======= ======= ======= =======")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Exec time          4296s      1s    194s      1s      2s      5s      1s")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Lock time          244ms       0     3ms    75us   103us    72us    66us")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Rows sent          3.13k       0      10    0.99    0.99    0.22    0.99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Rows examine       4.14G       0   1.38M   1.31M   1.32M 228.71k   1.32M")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Query size       781.01k      15     425  247.14  246.02   27.68  246.02")]),s._v("\n")])])]),t("p",[s._v("参数说明：")]),s._v(" "),t("ul",[t("li",[s._v("Overall: 总共有多少条查询，上例为总共3.24k个查询。")]),s._v(" "),t("li",[s._v("Time range: 查询执行的时间范围。")]),s._v(" "),t("li",[s._v("unique: 唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询，该例为12。")]),s._v(" "),t("li",[s._v("total: 总计 min:最小 max: 最大 avg:平均")]),s._v(" "),t("li",[s._v("95%: 把所有值从小到大排列，位置位于95%的那个数，这个数一般最具有参考价值。")]),s._v(" "),t("li",[s._v("median: 中位数，把所有值从小到大排列，位置位于中间那个数。")])]),s._v(" "),t("h5",{attrs:{id:"第二部分-查询分组统计结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二部分-查询分组统计结果"}},[s._v("#")]),s._v(" 第二部分: 查询分组统计结果:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Profile")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Rank Query ID                     Response time   Calls R/Call   V/M   I")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ==== ============================ =============== ===== ======== ===== =")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    1 0x523892349F733C254576AB7... 3731.1533 86.8%  3140   1.1883  0.08 SELECT t_xxx_result_? t_xxx_plugin_?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    2 0xA72A99A2AD696A84F9CCD57...  360.7725  8.4%     2 180.3862  2.08 DELETE t_xxx_result_?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    4 0x40485EE0C3F3C643A5035DC...   62.4520  1.5%    34   1.8368  0.56 SELECT")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    5 0x266AA5D17D7ACC44DEC38DA...   53.5156  1.2%    40   1.3379  0.02 REPLACE t_xxx_result_?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# MISC 0xMISC                         88.5263  2.1%    20   4.4263   0.0 <8 ITEMS>")]),s._v("\n")])])]),t("p",[s._v("这部分对查询进行参数化并分组，然后对各类查询的执行情况进行分析，结果按总执行时长，从大到小排序。")]),s._v(" "),t("p",[s._v("参数说明：")]),s._v(" "),t("ul",[t("li",[s._v("Response: 总的响应时间。")]),s._v(" "),t("li",[s._v("time: 该查询在本次分析中总的时间占比。")]),s._v(" "),t("li",[s._v("calls: 执行次数，即本次分析总共有多少条这种类型的查询语句。")]),s._v(" "),t("li",[s._v("R/Call: 平均每次执行的响应时间。")]),s._v(" "),t("li",[s._v("Item : 查询对象")])]),s._v(" "),t("h5",{attrs:{id:"第三部分-每一种查询的详细统计结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三部分-每一种查询的详细统计结果"}},[s._v("#")]),s._v(" 第三部分：每一种查询的详细统计结果:")]),s._v(" "),t("p",[s._v("这里我们以第一个查询为例:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Query 1: 0.06 QPS, 0.07x concurrency, ID 0x523892349F733C254576AB7240430D5A at byte 204852")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This item is included in the report because it matches --limit.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Scores: V/M = 0.08")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Time range: 2019-06-04 19:44:09 to 2019-06-05 10:20:42")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Attribute    pct   total     min     max     avg     95%  stddev  median")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ============ === ======= ======= ======= ======= ======= ======= =======")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Count         97    3140")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Exec time     86   3731s      1s      3s      1s      2s   314ms      1s")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Lock time     97   237ms    48us     2ms    75us   103us    53us    66us")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Rows sent     98   3.07k       1       1       1       1       0       1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Rows examine  99   4.13G 677.82k   1.38M   1.35M   1.32M  72.24k   1.32M")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Query size    97 760.47k     248     248     248     248       0     248")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# String:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Databases    vul_xxx")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Hosts        localhost")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Users        scan")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Query_time distribution")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   1us")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  10us")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 100us")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   1ms")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  10ms")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 100ms")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    1s  ################################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  10s+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Tables")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    SHOW TABLE STATUS FROM `vul_xxx` LIKE 't_xxx_result_0'\\G")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    SHOW CREATE TABLE `vul_xxx`.`t_xxx_result_0`\\G")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    SHOW TABLE STATUS FROM `vul_xxx` LIKE 't_xxx_plugin_xxx'\\G")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    SHOW CREATE TABLE `vul_xxx`.`t_xxx_plugin_xxx`\\G")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# EXPLAIN /*!50100 PARTITIONS*/")]),s._v("\nSELECT count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("distinct resultId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" as cnt, p.level\nFROM "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("t_xxx_result_0"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" as "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\nJOIN "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("t_xxx_plugin_xxx"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" as "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" ON "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("pId"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("p.pId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nWHERE "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("tId"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'100011'")]),s._v("\nGROUP BY "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("level"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\nORDER BY "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("level"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" DESC"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("G\n")])])]),t("p",[s._v("我们通过explain来分析该sql语句：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> explain SELECT count(distinct resultId) as cnt, plugin.level FROM `t_xxx_result` as `result` JOIN `t_plugin` as `plugin` ON (`result`.`pId`=plugin.pId) WHERE `tId` = '1001' GROUP BY `level` ORDER BY `level` DESC\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: result\n         type: ref\npossible_keys: tId,pId\n          key: tId\n      key_len: 4\n          ref: const\n         rows: 1\n        Extra: Using temporary; Using filesort\n*************************** 2. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: plugin\n         type: eq_ref\npossible_keys: PRIMARY,level\n          key: PRIMARY\n      key_len: 4\n          ref: vul_xxx.result.pId\n         rows: 1\n        Extra: NULL\n2 rows in set (0.00 sec)\n")])])]),t("p",[s._v("可见，这里使用了文件排序，导致了查询速度变慢。")]),s._v(" "),t("p",[s._v("通过pt-query-digest定位到具体的问题sql语句，然后通过explain具体分析sql语句并优化。")]),s._v(" "),t("h3",{attrs:{id:"_2、连接数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、连接数"}},[s._v("#")]),s._v(" 2、连接数")]),s._v(" "),t("p",[s._v("如果经常遇到MySQL：ERROR 1040：Too many connections的情况，一般有两种可能：")]),s._v(" "),t("ul",[t("li",[s._v("访问量确实很高，MySQL服务器扛不住，这个时候需要考虑增加从服务器分散读压力")]),s._v(" "),t("li",[s._v("MySQL配置文件中max_connections的值过小，达到了max_connections限制。此时，它就会开始拒绝新连接，同时Connection_errors_max_connections指标会开始增加，追踪所有失败连接尝试的Aborted_connects指标也会开始增加。")])]),s._v(" "),t("p",[s._v("（1）查询MySQL服务器的最大连接数")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like 'max_connections';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_connections | 1000  |\n+-----------------+-------+\n")])])]),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like '%errors_max_connections%';\n+-----------------------------------+-------+\n| Variable_name                     | Value |\n+-----------------------------------+-------+\n| Connection_errors_max_connections | 0     |\n+-----------------------------------+-------+\n\nmysql> show global status like '%Aborted_connects%';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| Aborted_connects | 216   |\n+------------------+-------+\n")])])]),t("p",[s._v("（2）查询MySQL服务器历史的最大连接数")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'max_used_connections';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| Max_used_connections | 3     |\n+----------------------+-------+\n")])])]),t("p",[s._v("由于MySQL历史最大的连接数只有3，没有达到MySQL服务器最大连接数上限1000，所以不会出现1040错误。")]),s._v(" "),t("h3",{attrs:{id:"_3、缓存使用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、缓存使用情况"}},[s._v("#")]),s._v(" 3、缓存使用情况")]),s._v(" "),t("p",[s._v("key_buffer_size是设置MyISAM表索引缓存空间的大小，此参数对MyISAM表性能影响最大。下面是一台MyISAM为主要存储引擎服务器的配置：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like 'key_buffer_size';\n+-----------------+-----------+\n| Variable_name   | Value   |\n+-----------------+-----------+\n| key_buffer_size | 536870912 |\n+-----------------+-----------+\n")])])]),t("p",[s._v("从上面知道，分配了512MB内存给key_buffer_size。再来看看key_buffer_size的使用情况：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'key_read%';\n+-------------------+--------------+\n| Variable_name     | Value |\n+-------------------+-------+\n| Key_read_requests | 27813678766 |\n| Key_reads          |  6798830      |\n+-------------------+--------------+\n")])])]),t("p",[s._v("一共有27813678766个索引读取请求，有6798830个请求在内存中没有找到，直接从硬盘读取索引。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("key_cache_miss_rate = key_reads /key_read_requests * 100%\n")])])]),t("p",[s._v("比如上面的数据，key_cache_miss_rate为0.0244%，效果非常好，key_cache_miss_rate在0.1%以下都很好，如果key_cache_miss_rate在0.01%以下的话，说明key_cache_miss_rate分配得过多，可以适当减少。")]),s._v(" "),t("h3",{attrs:{id:"_4、临时表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、临时表"}},[s._v("#")]),s._v(" 4、临时表")]),s._v(" "),t("p",[s._v("每次创建临时表，Created_tmp_tables都会增加，如果在磁盘上创建临时表，Created_tmp_disk_tables也会增加，Created_tmp_files表示MySQL服务创建临时文件数。")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'created_tmp%';\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 0     |\n| Created_tmp_files       | 5     |\n| Created_tmp_tables      | 502   |\n+-------------------------+-------+\n")])])]),t("p",[t("strong",[s._v("理想的配置如下")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Created_tmp_disk_tables/ Created_tmp_files * 100% <= 25%\n")])])]),t("p",[s._v("查看MySQL服务器对临时表的配置：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables where Variable_name in ('tmp_table_size','max_heap_table_size');\n+---------------------+----------+\n| Variable_name       | Value    |\n+---------------------+----------+\n| max_heap_table_size | 16777216 |\n| tmp_table_size      | 16777216 |\n+---------------------+----------+\n")])])]),t("h3",{attrs:{id:"_5、线程使用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、线程使用情况"}},[s._v("#")]),s._v(" 5、线程使用情况")]),s._v(" "),t("p",[s._v("如果在MySQL服务器的配置中设置了thread_cache_size，当客户端断开时，服务器处理此客户请求的线程将会缓存起来以响应下一个客户而不是销毁（前提是缓存数未达到上线）。即可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，如果线程重新被请求，那么请求将从缓存中读取，如果缓存中是空的或者是新的请求，那么这个线程将被重新创建，如果有很多新的线程，增加这个值可以改善系统性能。查看命令如下：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like 'thread_cache_size';\n+-------------------+-------+\n| Variable_name     | Value |\n+-------------------+-------+\n| thread_cache_size | 512   |\n+-------------------+-------+\n")])])]),t("p",[s._v("查看当前MySQL服务器的线程使用情况：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'thread%';\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Threadpool_idle_threads | 0     |\n| Threadpool_threads      | 0     |\n| Threads_cached          | 381   |\n| Threads_connected       | 5     |\n| Threads_created         | 386   |\n| Threads_running         | 2     |\n+-------------------------+-------+\n\nmysql> show global status like 'Connection_errors_internal';\n+----------------------------+-------+\n| Variable_name              | Value |\n+----------------------------+-------+\n| Connection_errors_internal | 0     |\n+----------------------------+-------+\n1 row in set (0.00 sec)\n\nmysql> show global status like 'Aborted_connects';\n+------------------+---------+\n| Variable_name    | Value   |\n+------------------+---------+\n| Aborted_connects | 1044566 |\n+------------------+---------+\n1 row in set (0.00 sec)\n\nmysql> show global status like 'Connection_error_max_connections';\nEmpty set (0.00 sec)\n")])])]),t("p",[s._v("说明：")]),s._v(" "),t("ul",[t("li",[s._v("Threads_cached：代表当前此时此刻线程缓存中有多少"),t("strong",[s._v("空闲线程")])]),s._v(" "),t("li",[s._v("Threads_connected：代表当前"),t("strong",[s._v("已建立连接的线程数量")]),s._v('，每个连接对应一个线程。当所有可用连接都被占用时，如果一个客户端试图连接至MySQL，后者会返回"Too many connections"的错误，同时将Connection_errors_max_connections的值增加')]),s._v(" "),t("li",[s._v("Threads_created：代表从最近一次服务启动，已创建线程的数量")]),s._v(" "),t("li",[s._v("Threads_running：当前运行的连接")]),s._v(" "),t("li",[s._v("Connection_errors_internal：由于服务器内部本身导致的错误")]),s._v(" "),t("li",[s._v("Aborted_connects：尝试与服务器建立连接但是失败的次数")])]),s._v(" "),t("h3",{attrs:{id:"_6、缓冲池利用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、缓冲池利用情况"}},[s._v("#")]),s._v(" 6、缓冲池利用情况")]),s._v(" "),t("img",{staticStyle:{zoom:"60%"},attrs:{src:a(361),alt:"InnoDB存储引擎内存结构"}}),s._v(" "),t("p",[s._v("InnoDB在内存中使用一片区域作为缓冲区，用来缓存数据表、索引等数据（如上表），缓冲区太小，会导致数据库性能下降，致使磁盘IO增加。")]),s._v(" "),t("p",[s._v("我们知道，内存的读取速度比磁盘读取速度要快很多，当Innodb_buffer_pool_reads的值开始增加，就意味着数据库性能有可能出现问题。")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'Innodb_buffer_pool_read%';\n+---------------------------------------+---------------+\n| Variable_name                         | Value         |\n+---------------------------------------+---------------+\n| Innodb_buffer_pool_read_ahead_rnd     | 0             |\n| Innodb_buffer_pool_read_ahead         | 60272         |\n| Innodb_buffer_pool_read_ahead_evicted | 0             |\n| Innodb_buffer_pool_read_requests      | 3959122635741 |\n| Innodb_buffer_pool_reads              | 30673         |\n+---------------------------------------+---------------+\n")])])]),t("p",[s._v("说明：")]),s._v(" "),t("ul",[t("li",[s._v("Innodb_buffer_pool_read_requests：总共从缓冲池中缓存的页面中读取出的页数")]),s._v(" "),t("li",[s._v("Innodb_buffer_pool_reads：从磁盘上一页一页的读取的页数，从缓冲池中读取页面， 若缓冲池里面没， 就会从磁盘读取")])]),s._v(" "),t("p",[s._v("缓冲池利用率是在考虑扩大缓冲池之前应该检查的重要指标，可以通过如下方式计算得到：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("(Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free) / \n Innodb_buffer_pool_pages_total\n")])])]),t("p",[s._v("另一个重要的指标，缓冲池的命中率计算方法：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("(Innodb_buffer_pool_read_requests - Innodb_buffer_pool_reads) /\nInnodb_buffer_pool_read_requests * 100%\n")])])]),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like '%buffer_pool_pages%';\n+----------------------------------+-------------+\n| Variable_name                    | Value       |\n+----------------------------------+-------------+\n| Innodb_buffer_pool_pages_data    | 852799      |\n| Innodb_buffer_pool_pages_dirty   | 31          |\n| Innodb_buffer_pool_pages_flushed | 30796616008 |\n| Innodb_buffer_pool_pages_free    | 9544        |\n| Innodb_buffer_pool_pages_misc    | 52537       |\n| Innodb_buffer_pool_pages_total   | 914880      |\n+----------------------------------+-------------+\n")])])]),t("p",[s._v("缓冲池转化为字节大小的计算公式：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Innodb_buffer_pool_pages_total * innodb_page_size\n# 上面的配置对应的缓冲池大小为：\n# 16KB * 914880 / 1024 / 1024 = 14.295GB\n")])])]),t("p",[s._v("innodb_page_size页面大小是可调整的，默认是16384字节，即16KB，可以通过如下命令查看：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like 'innodb_page_size';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| innodb_page_size | 16384 |\n+------------------+-------+\n")])])]),t("p",[s._v("也可以通过innodb_buffer_pool_size直接获取缓冲池大小：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show variables like '%innodb_buffer_pool_size%';\n+-------------------------+-------------+\n| Variable_name           | Value       |\n+-------------------------+-------------+\n| innodb_buffer_pool_size | 14989393920 |\n+-------------------------+-------------+\n")])])]),t("h3",{attrs:{id:"_7、磁盘排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、磁盘排序"}},[s._v("#")]),s._v(" 7、磁盘排序")]),s._v(" "),t("p",[s._v("监控磁盘是否出现磁盘排序命令：")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'sort_merge_passes';\n+-------------------+---------+\n| Variable_name     | Value   |\n+-------------------+---------+\n| Sort_merge_passes | 2169684 |\n+-------------------+---------+\n1 row in set (0.00 sec)\n")])])]),t("p",[s._v("sort_merge_passes：必须要做归并排序的次数")]),s._v(" "),t("h3",{attrs:{id:"_8、查看网络传输量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、查看网络传输量"}},[s._v("#")]),s._v(" 8、查看网络传输量")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'bytes_received';\n+----------------+---------------+\n| Variable_name  | Value         |\n+----------------+---------------+\n| Bytes_received | 2604213103777 |\n+----------------+---------------+\n1 row in set (0.00 sec)\n\nmysql> show global status like 'bytes_sent';\n+---------------+---------------+\n| Variable_name | Value         |\n+---------------+---------------+\n| Bytes_sent    | 7074371933580 |\n+---------------+---------------+\n1 row in set (0.00 sec)\n")])])]),t("h3",{attrs:{id:"_9、吞吐量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、吞吐量"}},[s._v("#")]),s._v(" 9、吞吐量")]),s._v(" "),t("p",[s._v("MySQL中有各种不同的统计指标，其监控指标多以Com_xxx的方式命名，比较常用的有QPS和TPS。")]),s._v(" "),t("p",[s._v("MySQL与QPS相关的三个监控项，分别为Queries、Questions、Com_select，一般我们采用Com_select作为QPS的指标。同样，对于TPS，采用Com_insert + Com_update + Com_delete三个统计项之和作为指标。")]),s._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> show global status like 'Com_select';\n+---------------+------------+\n| Variable_name | Value      |\n+---------------+------------+\n| Com_select    | 6552507251 |\n+---------------+------------+\n1 row in set (0.00 sec)\n\nmysql> show global status like 'Com_insert';\n+---------------+------------+\n| Variable_name | Value      |\n+---------------+------------+\n| Com_insert    | 1940243238 |\n+---------------+------------+\n1 row in set (0.00 sec)\n\nmysql> show global status like 'Com_update';\n+---------------+------------+\n| Variable_name | Value      |\n+---------------+------------+\n| Com_update    | 1493408493 |\n+---------------+------------+\n1 row in set (0.00 sec)\n\nmysql> show global status like 'Com_delete';\n+---------------+---------+\n| Variable_name | Value   |\n+---------------+---------+\n| Com_delete    | 1966462 |\n+---------------+---------+\n1 row in set (0.00 sec)\n")])])]),t("h3",{attrs:{id:"_10、查看请求来源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、查看请求来源"}},[s._v("#")]),s._v(" 10、查看请求来源")]),s._v(" "),t("p",[s._v("有时候数据库并发量过大，想要定位是那个ip频繁请求，可以使用如下命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mysql> SELECT substring_index(host, ':',1) AS host_name,state,count(*) FROM information_schema.processlist GROUP BY state,host_name;\n+---------------+------------------------------------------------------------------+----------+\n| host_name     | state                                                            | count(*) |\n+---------------+------------------------------------------------------------------+----------+\n|               |                                                                  |        2 |\n| 10.5.xx.xx |                                                                  |        3 |\n| 10.5.9.x    | executing                                                        |        1 |\n|               | Master has sent all binlog to slave; waiting for binlog to be up |        1 |\n| 10.5.xx.xx | update                                                           |       62 |\n+---------------+------------------------------------------------------------------+----------+\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);