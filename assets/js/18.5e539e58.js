(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{240:function(t,s,a){t.exports=a.p+"assets/img/wechat.50adb4d4.png"},448:function(t,s,a){t.exports=a.p+"assets/img/3 bfs-1.77d036bf.png"},449:function(t,s,a){t.exports=a.p+"assets/img/3 bfs-2.ee59158f.png"},450:function(t,s,a){t.exports=a.p+"assets/img/3 bfs-3.e904f097.png"},451:function(t,s,a){t.exports=a.p+"assets/img/3 bfs-4.edaf1842.png"},452:function(t,s,a){t.exports=a.p+"assets/img/3 bfs-5.4f712b6c.png"},453:function(t,s,a){t.exports=a.p+"assets/img/3 dfs-1.09938a9b.png"},454:function(t,s,a){t.exports=a.p+"assets/img/3 dfs-2.0830cf93.png"},455:function(t,s,a){t.exports=a.p+"assets/img/3 dfs-3.db516b54.png"},456:function(t,s,a){t.exports=a.p+"assets/img/3 dfs-4.37ba83fe.png"},457:function(t,s,a){t.exports=a.p+"assets/img/3 dfs-5.4697fac6.png"},458:function(t,s,a){t.exports=a.p+"assets/img/3 dfs-6.393c318f.png"},459:function(t,s,a){t.exports=a.p+"assets/img/3 dfs-7.4f0dbdbb.png"},460:function(t,s,a){t.exports=a.p+"assets/img/3 dfs-8.039a33c4.png"},461:function(t,s,a){t.exports=a.p+"assets/img/3 dag-demo.b0edd7a5.png"},650:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"基本概念介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念介绍"}},[t._v("#")]),t._v(" 基本概念介绍")]),t._v(" "),s("p",[t._v("在我们具体展开流程引擎的各种实现方法之前，有必要先交代下这些流程引擎实现过程中涉及到的一些基础技术和概念。")]),t._v(" "),s("h3",{attrs:{id:"拓扑排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序"}},[t._v("#")]),t._v(" 拓扑排序")]),t._v(" "),s("p",[t._v("拓扑排序是针对有向图（Directed Graph）的一种排序方法，它将有向图中的顶点以线性顺序进行排序，满足以下条件：对于图中的每条有向边 "),s("code",[t._v("(u, v)")]),t._v("，在排序后的序列中，顶点 "),s("code",[t._v("u")]),t._v(" 必须排在顶点 "),s("code",[t._v("v")]),t._v(" 的前面。")]),t._v(" "),s("p",[t._v("拓扑排序仅适用于有向无环图（DAG），即不存在环路的有向图。这是因为如果图中存在环路，就会导致无法进行拓扑排序，因为无法找到满足上述条件的排序顺序。")]),t._v(" "),s("blockquote",[s("p",[t._v("实现方法")])]),t._v(" "),s("p",[t._v("拓扑排序可以通过深度优先搜索（DFS）或广度优先搜索（BFS）来实现。基本思路是从图中选择一个没有入边的顶点（即入度为 0 的顶点）作为排序的起点，然后从图中移除与该顶点相连的边，继续寻找没有入边的顶点。这个过程一直持续下去，直到所有的顶点都被排序。")]),t._v(" "),s("blockquote",[s("p",[t._v("应用")])]),t._v(" "),s("p",[t._v("拓扑排序在实际中有许多应用，尤其在计算机科学和工程领域中是非常重要的：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("任务调度：")]),t._v(" 在工程和计算任务中，拓扑排序能够有效地确定任务执行的顺序，特别是在有依赖关系的情况下。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("编译器优化：")]),t._v(" 在编译器中，拓扑排序有助于确定源代码中各个模块之间的依赖关系，从而优化编译过程的顺序。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("数据流分析：")]),t._v(" 在静态分析中，拓扑排序用于确定数据流分析的顺序，以便有效地分析变量之间的依赖关系。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("依赖关系分析：")]),t._v(" 许多系统和任务之间存在依赖关系，拓扑排序有助于分析这些依赖关系，并确定执行或处理的顺序。")])])]),t._v(" "),s("p",[t._v("拓扑排序是一种强大的算法技术，能够帮助处理各种问题中的顺序性和依赖关系，并提供一种有序的处理方式。")]),t._v(" "),s("p",[t._v("下面我们对拓展排序的两种实现方法，深度优先搜索和广度优先搜索进行简单的介绍，尤其是广度优先算法（BFS）会作为基于DAG方式实现流程引擎的核心图遍历算法。")]),t._v(" "),s("h3",{attrs:{id:"广度优先算法-bfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广度优先算法-bfs"}},[t._v("#")]),t._v(" 广度优先算法（BFS）")]),t._v(" "),s("p",[t._v("广度优先搜索（Breadth-First Search，BFS）是一种图遍历算法，用于遍历或搜索图中的节点。它从一个指定的节点开始，首先访问该节点的所有邻居节点，然后依次访问这些邻居节点的邻居节点，以此类推，直到遍历完整个连通区域。")]),t._v(" "),s("p",[t._v("BFS 通常使用队列来实现。")]),t._v(" "),s("blockquote",[s("p",[t._v("算法步骤")])]),t._v(" "),s("ol",[s("li",[t._v("选择一个起始节点，将其标记为已访问，并将其加入队列中。")]),t._v(" "),s("li",[t._v("从队列中取出一个节点，访问它的所有未标记邻居节点，并将这些邻居节点标记为已访问，并加入队列。")]),t._v(" "),s("li",[t._v("重复步骤 2，直到队列为空为止。")])]),t._v(" "),s("p",[t._v("BFS 的特点是按层级逐步扩展，首先遍历起始节点的所有直接邻居，然后是邻居的邻居，以此类推，直到遍历完整个。")]),t._v(" "),s("blockquote",[s("p",[t._v("伪代码实现")])]),t._v(" "),s("p",[t._v("输入：图Graph和它的根节点start_node")]),t._v(" "),s("p",[t._v("输出：遍历图Graph")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("BFS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" empty queue  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 这里使用到队列的数据结构\n    visited "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n    add start_node to queue\n    mark start_node "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" visited\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" queue "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        current_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dequeue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" current_node\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each neighbor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" Graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("adjacentNodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" neighbor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" visited"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                add neighbor to queue\n                mark neighbor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" visited\n")])])]),s("p",[t._v("这段伪代码描述了 BFS 算法的基本逻辑：")]),t._v(" "),s("ol",[s("li",[t._v("从指定的起始节点开始。")]),t._v(" "),s("li",[t._v("使用一个队列(FIFO)存储待访问的节点，并使用一个集合（可以是哈希集）来标记已经访问过的节点。")]),t._v(" "),s("li",[t._v("将起始节点加入队列，标记为已访问。")]),t._v(" "),s("li",[t._v("当队列不为空时，循环执行以下操作：\n"),s("ul",[s("li",[t._v("取出队列中的当前节点。")]),t._v(" "),s("li",[t._v("访问并处理当前节点。")]),t._v(" "),s("li",[t._v("遍历当前节点的邻居节点：\n"),s("ul",[s("li",[t._v("如果邻居节点尚未被访问，将其加入队列，并标记为已访问。")])])])])])]),t._v(" "),s("p",[t._v("请注意，伪代码中的 "),s("code",[t._v("Graph.adjacentNodes(current_node)")]),t._v(" 表示获取当前节点的邻居节点列表。")]),t._v(" "),s("blockquote",[s("p",[t._v("举例说明")])]),t._v(" "),s("p",[t._v("1、首先将起始节点A推送到队列中，并将节点A表示为已访问")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(448),alt:"image-20231030235734431"}}),t._v(" "),s("p",[t._v("2、从队列头中取出节点A，并获取其邻居节点BC，把BC节点推送到队列，并标记为已访问")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(449),alt:"image-20231031000040786"}}),t._v(" "),s("p",[t._v("3、从队列头中取出节点B，并获取其邻居节点DE，把DE节点推送到队列，并标记为已访问")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(450),alt:"image-20231031000241471"}}),t._v(" "),s("p",[t._v("4、从队列头中取出节点C，并获取其邻居节点FG，把FG节点推送到队列，并标记为已访问")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(451),alt:"image-20231031000429387"}}),t._v(" "),s("p",[t._v("5、然后继续从队列头中，依次把D、E、F、G节点取出来，由于DEFG都是叶子节点没有邻居节点，所以就没有入队列的操作。最后队列为空，图遍历结束。")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(452),alt:"image-20231031000642558"}}),t._v(" "),s("blockquote",[s("p",[t._v("应用")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("最短路径和最小操作问题：")]),t._v(" 在无权图中，BFS 可以用于查找节点 A 到节点 B 的最短路径。在这种情况下，BFS 从起始节点开始，逐层遍历直到找到目标节点。这同样适用于网络中数据包的传输路径、社交网络中的最短关系链等。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("解决谜题和游戏：")]),t._v(" BFS 可用于解决一些谜题，例如迷宫问题或寻找棋盘游戏中的最优解。通过逐层搜索可能的路径，可以找到解决方案或最优解。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("网络广播和社交网络分析：")]),t._v(" 在计算机网络中，BFS 可用于广播信息或寻找特定信息的传播路径。在社交网络分析中，BFS 可用于查找特定节点的关联节点，以及发现社交网络中的群体或子网络。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("拓扑排序：")]),t._v(" BFS 可用于拓扑排序，在有向图中对节点进行排序，以便进行有序处理或执行。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("检测环路：")]),t._v(" BFS 在检测图中是否存在环路时也很有用。在搜索过程中，若发现某节点的邻居节点已经被访问但并非其父节点，说明图中存在环路。")])])]),t._v(" "),s("p",[t._v("这些只是广度优先搜索在实际应用中的一些典型场景。BFS 作为一种重要的图遍历算法，被广泛应用于网络路由、数据检索、图论、计算机科学和各种领域的问题求解。")]),t._v(" "),s("h3",{attrs:{id:"深度优先算法-dfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度优先算法-dfs"}},[t._v("#")]),t._v(" 深度优先算法（DFS）")]),t._v(" "),s("p",[t._v("深度优先搜索（Depth-First Search，DFS）也是一种用于遍历或搜索图的算法。DFS 从起始节点开始，沿着一条路径尽可能深地遍历完这条路径，直到到达最深的节点，然后回溯并探索其他路径。")]),t._v(" "),s("blockquote",[s("p",[t._v("算法步骤")])]),t._v(" "),s("ol",[s("li",[t._v("从指定起始节点开始递归或使用栈的方式遍历与其相邻的节点。")]),t._v(" "),s("li",[t._v("对于每个相邻节点，若该节点未被访问，则递归或压入栈并访问该节点。")]),t._v(" "),s("li",[t._v("继续对未被访问的相邻节点进行深度优先搜索。")])]),t._v(" "),s("blockquote",[s("p",[t._v("伪代码实现")])]),t._v(" "),s("p",[t._v("输入：图Graph和它的根节点start_node")]),t._v(" "),s("p",[t._v("输出：遍历图Graph")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("DFS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    stack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" empty stack  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 这里使用到栈的数据结构\n    visited "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 用来存储已经访问过的节点\n\n    add start_node to stack\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" stack "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        current_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" current_node "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" visited"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" current_node\n            mark current_node "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" visited\n\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each neighbor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" reverse order of Graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("adjacentNodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" neighbor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" visited"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    add neighbor to stack\n")])])]),s("p",[t._v("请注意，伪代码中的 "),s("code",[t._v("Graph.adjacentNodes(current_node)")]),t._v(" 表示获取当前节点的邻居节点列表。")]),t._v(" "),s("p",[t._v("上述伪代码演示了典型的迭代式 DFS 实现方式。这里主要使用栈来模拟递归的行为。")]),t._v(" "),s("p",[t._v("主要步骤包括：")]),t._v(" "),s("ol",[s("li",[t._v("从起始节点开始，将其加入栈。")]),t._v(" "),s("li",[t._v("当栈不为空时，循环执行以下操作：\n"),s("ul",[s("li",[t._v("弹出栈顶的当前节点。")]),t._v(" "),s("li",[t._v("若当前节点未被访问，则访问并处理该节点，同时标记为已访问。")]),t._v(" "),s("li",[t._v("遍历当前节点的邻居节点，将未被访问的邻居节点加入栈。")])])])]),t._v(" "),s("p",[t._v("通过使用栈的迭代方式，深度优先搜索可以模拟递归的深度探索过程，不仅更符合典型的 DFS 特性，还能有效地遍历图中的节点。")]),t._v(" "),s("blockquote",[s("p",[t._v("举例说明")])]),t._v(" "),s("p",[t._v("1、如下图，首先将图的根节点A入栈")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(453),alt:"image-20231031091412821"}}),t._v(" "),s("p",[t._v("2、然后弹出栈顶节点A，标记A为已访问过，并且把C、B节点入栈")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(454),alt:"image-20231031091504615"}}),t._v(" "),s("p",[t._v("3、弹出栈顶节点B，标记B为已访问过，并且把E、D节点入栈")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(455),alt:"image-20231031091552706"}}),t._v(" "),s("p",[t._v("4、弹出栈顶节点D，标记D为已访问过，由于D节点是叶子节点，没有邻居节点，所以没有入栈操作")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(456),alt:"image-20231031091803968"}}),t._v(" "),s("p",[t._v("5、弹出栈顶节点E，标记E为已访问过，由于E节点是叶子节点，没有邻居节点，所以没有入栈操作")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(457),alt:"image-20231031091930840"}}),t._v(" "),s("p",[t._v("6、弹出栈顶节点C，标记C为已访问过，并且把G、F节点入栈")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(458),alt:"image-20231031092203755"}}),t._v(" "),s("p",[t._v("7、弹出栈顶节点F，标记F为已访问过，由于F节点是叶子节点，没有邻居节点，所以没有入栈操作")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(459),alt:"image-20231031092324418"}}),t._v(" "),s("p",[t._v("8、弹出栈顶节点G，标记G为已访问过，由于G节点是叶子节点，没有邻居节点，所以没有入栈操作")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(460),alt:"image-20231031092414849"}}),t._v(" "),s("p",[t._v("9、此时栈为空，遍历结束")]),t._v(" "),s("blockquote",[s("p",[t._v("应用")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("解决路径问题：")]),t._v(" DFS 通常用于解决路径或连接问题，比如查找图中的路径或寻找连通组件。")]),t._v(" "),s("li",[s("strong",[t._v("拓扑排序：")]),t._v(" 通过 DFS 可以实现拓扑排序，找出有向无环图中节点的排序序列。")]),t._v(" "),s("li",[s("strong",[t._v("游戏解决：")]),t._v(" 在游戏设计中，DFS 可用于解决迷宫问题或寻找路径等。")])]),t._v(" "),s("h2",{attrs:{id:"基于有向无环图-dag-的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于有向无环图-dag-的实现"}},[t._v("#")]),t._v(" 基于有向无环图（DAG）的实现")]),t._v(" "),s("p",[t._v("有向无环图（Directed Acyclic Graph，DAG）是图论中的一种特殊类型的图，它由顶点和有向边组成，这些边的方向指示了顶点之间的关系，并且图中不存在环路。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("有向边：")]),t._v(" 每条边都有一个明确的方向，从一个顶点指向另一个顶点。这个方向性表示了顶点之间的关系，例如，如果从顶点 A 到顶点 B 有一条有向边，那么意味着 A 和 B 之间存在某种类型的指向性关系。")]),t._v(" "),s("li",[s("strong",[t._v("无环：")]),t._v(" 无向无环图中不存在环路，也就是说，无法从一个顶点出发沿着有向边回到该顶点，不论经过多少条边。这使得无向无环图变得特别重要，因为没有环路，从而没有循环依赖或者无限循环的问题，这对于许多算法和数据结构有着重要的意义。")])]),t._v(" "),s("p",[t._v("DAG 在计算机科学和相关领域中应用广泛，特别是在任务调度、数据流处理、编译器优化、算法设计等方面。例如，在本书介绍的工作流引擎中，任务之间的依赖关系可以用 DAG 来表示，这有助于有效地安排任务的执行顺序。")]),t._v(" "),s("p",[t._v("基于有向无环图（DAG）的流程引擎是一种使用图论中的有向无环图来描述和管理流程的引擎。在这种设计中，"),s("strong",[t._v("图的顶点表示任务或状态，有向边表示任务或状态之间的依赖关系或顺序关系")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("设计思路")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("顶点表示任务或状态：")]),t._v(" 每个顶点代表一个特定的任务或状态。例如，任务 A、任务 B、任务 C 等可以是图中的顶点。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("有向边表示依赖关系：")]),t._v(" 有向边表示任务或状态之间的依赖关系。例如，如果任务 A 必须在任务 B 之前执行，则存在从 A 到 B 的有向边。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("拓扑排序：")]),t._v(" 使用拓扑排序算法对有向无环图进行排序，以确定任务或状态的执行顺序。拓扑排序可确保按照图中的依赖关系进行顺序执行。常用广度优先算法或深度优先算法实现。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("状态迁移与执行逻辑：")]),t._v(" 每个任务或状态执行的逻辑与顶点相关联。当确定某个任务或状态处于执行阶段时，执行相应的任务逻辑。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("实现流程引擎的步骤")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("定义顶点和有向边：")]),t._v(" 将流程中的任务或状态定义为图的顶点，并确定它们之间的依赖关系。")]),t._v(" "),s("li",[s("strong",[t._v("构建有向无环图：")]),t._v(" 基于任务之间的依赖关系构建有向无环图。确保图中不存在循环依赖。")]),t._v(" "),s("li",[s("strong",[t._v("拓扑排序：")]),t._v(" 使用拓扑排序算法（这里使用广度优先算法）对图进行排序，以确定任务的执行顺序。这确定了任务或状态的顺序性。")]),t._v(" "),s("li",[s("strong",[t._v("任务执行与状态切换：")]),t._v(" 根据拓扑排序的结果执行任务或状态，确保按顺序进行。")])]),t._v(" "),s("p",[t._v("基于有向无环图的流程引擎利用图论中的拓扑排序等算法，提供了对任务或状态执行顺序的有效管理和控制。这种方法非常适用于复杂流程的管理和执行。目前主流的Airflow开源软件其核心的引擎调度算法就是基于DAG方式实现。")]),t._v(" "),s("blockquote",[s("p",[t._v("代码实现")])]),t._v(" "),s("ol",[s("li",[t._v("定义"),s("code",[t._v("Task")]),t._v("类：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Task")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" status\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dependencies\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("actions "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" actions\n")])])]),s("p",[s("code",[t._v("Task")]),t._v("类表示一个工作流中的任务。它包含以下属性：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("id")]),t._v("：任务的唯一标识符。")]),t._v(" "),s("li",[s("code",[t._v("name")]),t._v("：任务的名称。")]),t._v(" "),s("li",[s("code",[t._v("status")]),t._v("：任务的状态，例如“pending”或“completed”。")]),t._v(" "),s("li",[s("code",[t._v("dependencies")]),t._v("：任务所依赖的其他任务的ID列表。")]),t._v(" "),s("li",[s("code",[t._v("actions")]),t._v("：任务执行时需要执行的动作（函数）列表。")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("定义"),s("code",[t._v("WorkflowEngine")]),t._v("类：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowEngine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tasks "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execution_queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[s("code",[t._v("WorkflowEngine")]),t._v("类表示工作流引擎，它负责管理和执行任务。它包含以下属性：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("tasks")]),t._v("：一个字典，存储工作流中的所有任务，键是任务ID，值是任务对象。")]),t._v(" "),s("li",[s("code",[t._v("execution_queue")]),t._v("：一个列表，存储待执行的任务。")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("code",[t._v("add_task")]),t._v("方法：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowEngine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_task")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tasks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" task\n")])])]),s("p",[s("code",[t._v("add_task")]),t._v("方法将任务添加到工作流引擎的"),s("code",[t._v("tasks")]),t._v("字典中。")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("code",[t._v("execute_task")]),t._v("方法：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowEngine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute_task")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Executing task ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# execute actions in task.actions")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" action "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("actions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'completed'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Task ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(' completed\\n"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("execute_task")]),t._v("方法负责执行单个任务。它首先打印一条消息表示任务正在执行，然后遍历任务的"),s("code",[t._v("actions")]),t._v("列表并执行每个动作。最后，将任务状态设置为“completed”并打印一条消息表示任务已完成。")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[s("code",[t._v("execute_workflow")]),t._v("方法：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowEngine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute_workflow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" task "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tasks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execution_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execution_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            task "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execution_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("all")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tasks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("dep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'completed'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" dep "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" dependent_task "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tasks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" dependent_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        dependent_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remove"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" dependent_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                            self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execution_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dependent_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果任务的依赖项尚未满足，将任务放回执行队列的末尾")]),t._v("\n                self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execution_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Task ')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s dependencies:")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(' is not completed\\n"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sleep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 避免过度占用CPU资源    ")]),t._v("\n")])])]),s("p",[s("code",[t._v("execute_workflow")]),t._v("方法负责执行整个工作流。它首先将没有依赖项的任务添加到执行队列中。然后，当执行队列不为空时，从队列中取出一个任务并检查其所有依赖项是否已完成。如果所有依赖项都已完成，则执行任务，并从依赖于该任务的其他任务的依赖项列表中移除该任务。如果某个任务的依赖项列表为空，将其添加到执行队列中。这个过程会一直重复，直到执行队列为空。")]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[t._v("创建任务和工作流引擎实例：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义任务")]),t._v("\ntask_a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Task A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pending'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dependencies"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actions"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntask_b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Task B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pending'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dependencies"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actions"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntask_c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Task C'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pending'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dependencies"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actions"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntask_d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Task D'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pending'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dependencies"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actions"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建工作流引擎")]),t._v("\nworkflow_engine "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" WorkflowEngine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加任务")]),t._v("\nworkflow_engine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task_a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nworkflow_engine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task_b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nworkflow_engine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task_c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nworkflow_engine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task_d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行工作流")]),t._v("\nworkflow_engine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute_workflow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这部分代码创建了四个任务和一个工作流引擎实例。任务A没有依赖项，任务B和C依赖于任务A，任务D依赖于任务B和C。")]),t._v(" "),s("p",[t._v("最后添加任务并执行工作流。")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(461),alt:"image-20231031131533929"}}),t._v(" "),s("p",[t._v("执行代码：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("python dag.py\n")])])]),s("p",[t._v("如果一切顺利，你会看到如下输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Executing task A\nTask A completed\n\nExecuting task B\nTask B completed\n\nExecuting task C\nTask C completed\n\nExecuting task D\nTask D completed\n")])])]),s("img",{staticStyle:{zoom:"15%"},attrs:{src:a(240)}})])}),[],!1,null,null,null);s.default=e.exports}}]);