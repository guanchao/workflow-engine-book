(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{362:function(t,s,a){t.exports=a.p+"assets/img/11.3.4-async和sync请求顺序.2b9138d6.png"},363:function(t,s,a){t.exports=a.p+"assets/img/11.3.4-async和sync.a8bba563.png"},364:function(t,s,a){t.exports=a.p+"assets/img/13-4 分布式异步任务原理图.419c41a6.png"},365:function(t,s,a){t.exports=a.p+"assets/img/13-4 异步化.0b9c5d53.png"},632:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"同步编程和异步编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步编程和异步编程"}},[t._v("#")]),t._v(" 同步编程和异步编程")]),t._v(" "),s("p",[t._v("异步化其实就是异步编程，相对的就是同步编程，这两种是不同的编程模型，它们的核心区别在于任务的执行方式和处理顺序。以下是它们的主要区别：")]),t._v(" "),s("ul",[s("li",[t._v("同步编程（Synchronous Programming）\n"),s("ul",[s("li",[t._v("任务按顺序执行。一个任务必须完成后，才能执行下一个任务。")]),t._v(" "),s("li",[t._v("如果某个任务耗时较长，比如从网络获取数据，整个程序会等待该任务完成，导致其他任务处于阻塞状态。")])])]),t._v(" "),s("li",[t._v("异步编程（Asynchronous Programming）\n"),s("ul",[s("li",[t._v("任务可以并发执行，且不需要等待前一个任务完成。")]),t._v(" "),s("li",[t._v("异步任务可以在等待（比如I/O操作）时，先让其他任务执行，提高程序的响应速度和效率。")])])])]),t._v(" "),s("p",[t._v("同步编程的优势在于简单易用，但在处理复杂并发任务时性能较差。异步编程虽然复杂度更高，但能更好地处理I/O密集型任务，提高系统的性能和响应速度。")]),t._v(" "),s("h2",{attrs:{id:"异步编程思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步编程思想"}},[t._v("#")]),t._v(" 异步编程思想")]),t._v(" "),s("p",[t._v("异步编程（Asynchronous Programming）广泛应用于Web服务器、数据处理、GUI应用程序等领域。例如，Node.js通过异步I/O机制处理大量并发请求，从而提高了服务器的吞吐量。")]),t._v(" "),s("p",[t._v("这种技术旨在实现程序在执行耗时操作（如I/O操作、网络请求、数据库查询等）时不阻塞主线程或主流程。它通过将耗时任务的执行与主程序流程分离，使得程序能够继续处理其他任务，直到耗时操作完成后，再执行相应的回调或处理。")]),t._v(" "),s("p",[t._v("而在同步编程中，程序需要等待某一任务完成后才能继续执行后续代码，这往往导致程序的阻塞，特别是遇到需要等待响应的操作时。而异步编程则避免了这种等待，通过调度机制在任务完成后回调处理。")]),t._v(" "),s("p",[t._v("例如下图是同步编程和异步编程的请求顺序，两种不同的技术直接就导致下面两个请求响应耗时的差别，明显可以看到异步编程方式响应速度更快，因为没有阻塞等待结果。")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:a(362),alt:"Python Synchronous Asynchronous Web Model"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(363),alt:"Synchronous vs. Asynchronous Programming: What's the Difference? - BuildFire"}}),t._v(" "),s("p",[t._v("以下是异步化技术的几个关键点：")]),t._v(" "),s("p",[s("strong",[t._v("非阻塞操作")]),t._v("：传统的同步操作需要程序等待某一任务完成后才能执行下一步操作，而异步操作则通过非阻塞的方式执行，程序不会被卡住，能够并行处理多个任务。")]),t._v(" "),s("p",[s("strong",[t._v("回调机制")]),t._v("：回调机制是最早期且广泛使用的异步编程技术之一。在使用异步操作时，程序不直接返回结果，而是传递一个回调函数。异步操作完成后，系统会自动调用该回调函数并将结果传递给它。")]),t._v(" "),s("p",[s("strong",[t._v("消息队列")]),t._v("：消息队列（Message Queue, MQ）是一种基于异步消息传递的机制，常用于实现异步化和解耦服务。它通过将消息放入队列中，发送者和接收者可以异步通信，从而实现任务的并发处理。在基于消息队列实现异步化时，生产者可以在不等待消费者处理消息的情况下继续执行其他任务，消费者可以独立于生产者的时间点从队列中读取消息并进行处理。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("消息发送者（生产者）")]),t._v("：服务A将需要处理的任务封装为消息，放入队列中，立即返回并继续其他任务。")]),t._v(" "),s("li",[s("strong",[t._v("消息消费者（消费者）")]),t._v("：服务B从队列中读取消息并处理。由于服务B和服务A是松耦合的，服务A不需要等待B的处理完成。")])]),t._v(" "),s("p",[s("strong",[t._v("事件驱动机制")]),t._v("：事件驱动是一种基于回调的异步模式，通过事件循环来调度任务。Node.js中的事件驱动机制是异步I/O操作的典型代表，所有I/O操作都是异步的，事件循环负责调度任务。"),s("strong",[t._v("事件循环")]),t._v("是一个无限循环，监听事件并分发处理。主线程可以继续处理其他任务，当事件发生时，相关的回调函数会被调度执行。")]),t._v(" "),s("p",[s("strong",[t._v("多线程与多进程")]),t._v("：异步化技术在某些情况下通过多线程或多进程实现，使得不同的任务能够并行运行，最大化利用多核处理器的计算能力。与异步I/O不同的是，多线程和多进程允许多个任务真正同时运行。")]),t._v(" "),s("h2",{attrs:{id:"基于消息队列实现异步化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于消息队列实现异步化"}},[t._v("#")]),t._v(" 基于消息队列实现异步化")]),t._v(" "),s("h3",{attrs:{id:"实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),s("p",[t._v("消息队列通过以下两个角色进行异步通信：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("生产者（Producer）")]),t._v("：负责将消息发布到消息队列中。生产者将需要处理的任务封装为消息，放入队列后即可继续执行其他操作。")]),t._v(" "),s("li",[s("strong",[t._v("消费者（Consumer）")]),t._v("：从消息队列中获取消息并处理。消费者可以是多个，能够并发处理队列中的消息，处理完毕后继续监听队列。")])]),t._v(" "),s("h3",{attrs:{id:"实现流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现流程"}},[t._v("#")]),t._v(" 实现流程")]),t._v(" "),s("p",[t._v("（1）生产者发送消息")]),t._v(" "),s("p",[t._v("在异步系统中，生产者执行任务时，将任务相关信息封装为消息并发送到消息队列。此时生产者的主要任务已经完成，可以继续其他工作，而不需要等待任务结果。")]),t._v(" "),s("p",[t._v("（2）消息队列存储消息")]),t._v(" "),s("p",[t._v("消息队列接收生产者发送的消息，并将其放入一个先进先出（FIFO）队列中。消息会按照发送的顺序存储，等待消费者处理。")]),t._v(" "),s("p",[t._v("（3）消费者处理消息")]),t._v(" "),s("p",[t._v("消费者是独立的进程或服务，它从消息队列中拉取消息进行处理。消费者可以是多个，允许并发处理多个任务。在完成消息处理后，消费者可以选择确认处理结果（如ACK机制），以告知消息队列该消息已经成功处理，也可以通过另一个消息队列或持久化存储返回。")]),t._v(" "),s("h3",{attrs:{id:"代码实现举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现举例"}},[t._v("#")]),t._v(" 代码实现举例")]),t._v(" "),s("p",[t._v("使用Golang和Redis来实现消息队列，通常会利用Redis的"),s("code",[t._v("LIST")]),t._v("数据结构。Redis提供了"),s("code",[t._v("LPUSH")]),t._v("和"),s("code",[t._v("BRPOP")]),t._v("命令，分别用于将消息放入队列和从队列中获取消息。通过这种方式，可以轻松实现基于消息队列的异步化处理。")]),t._v(" "),s("p",[t._v("在下面的示例中，我们将使用Redis作为消息队列的基础，通过一个生产者将任务发送到队列中，多个消费者从队列中异步消费消息并处理任务。")]),t._v(" "),s("h4",{attrs:{id:"环境准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境准备"}},[t._v("#")]),t._v(" 环境准备")]),t._v(" "),s("ol",[s("li",[t._v("安装Golang Redis客户端库："),s("a",{attrs:{href:"https://github.com/go-redis/redis",target:"_blank",rel:"noopener noreferrer"}},[t._v("go-redis"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("确保已安装并运行了Redis服务。")])]),t._v(" "),s("p",[t._v("使用以下命令安装"),s("code",[t._v("go-redis")]),t._v("库：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("go get github.com/go-redis/redis/v8\n")])])]),s("h4",{attrs:{id:"代码示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码示例"}},[t._v("#")]),t._v(" 代码示例")]),t._v(" "),s("p",[t._v("假设我们要模拟一个订单处理系统，订单服务将订单任务异步发送到Redis队列中，而多个消费者会从队列中获取订单并处理。")]),t._v(" "),s("h5",{attrs:{id:"_1-生产者代码-将订单消息放入redis队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-生产者代码-将订单消息放入redis队列"}},[t._v("#")]),t._v(" 1. 生产者代码：将订单消息放入Redis队列")]),t._v(" "),s("p",[t._v("生产者的任务是将订单消息放入Redis的队列中。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"context"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/go-redis/redis/v8"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"log"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化Redis客户端")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ctx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Background")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" rdb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost:6379"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Redis地址")]),t._v("\n    DB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Redis数据库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟发送订单任务到Redis队列中")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        orderID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"order_%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendOrderToQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to send order: %v\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Order %s has been sent to the queue.\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" orderID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟每秒发送一笔订单")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将订单消息推送到Redis的任务队列")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendOrderToQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderID "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rdb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LPush")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"order_queue"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" orderID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"_2-消费者代码-从redis队列中异步获取并处理消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-消费者代码-从redis队列中异步获取并处理消息"}},[t._v("#")]),t._v(" 2. 消费者代码：从Redis队列中异步获取并处理消息")]),t._v(" "),s("p",[t._v("消费者从Redis队列中获取订单消息并进行处理。我们使用"),s("code",[t._v("BRPOP")]),t._v("命令来阻塞地等待消息，一旦有消息进入队列，就开始处理。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"context"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/go-redis/redis/v8"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"log"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化Redis客户端")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ctx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Background")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" rdb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost:6379"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Redis地址")]),t._v("\n    DB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Redis数据库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 启动两个消费者，模拟并发处理任务")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processOrders")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Consumer_1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processOrders")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Consumer_2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 防止主协程退出")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费者从队列中异步处理订单")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processOrders")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("consumerName "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从Redis队列中阻塞式地获取订单消息")]),t._v("\n        order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" rdb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BRPop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"order_queue"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s failed to get order: %v\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" consumerName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟订单处理")]),t._v("\n        orderID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BRPop返回的结果是一个包含队列名和消息的切片")]),t._v("\n        log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s processing order: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" consumerName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" orderID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟订单处理时间")]),t._v("\n        log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s finished processing order: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" consumerName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" orderID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"_3-运行示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-运行示例"}},[t._v("#")]),t._v(" 3. 运行示例")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("启动Redis服务器。")])]),t._v(" "),s("li",[s("p",[t._v("运行生产者程序，将订单任务发送到Redis队列：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("go run producer.go\n")])])])]),t._v(" "),s("li",[s("p",[t._v("运行消费者程序，消费者会异步从Redis队列中获取任务并处理：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("go run consumer.go\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"代码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码解析"}},[t._v("#")]),t._v(" 代码解析")]),t._v(" "),s("blockquote",[s("p",[t._v("生产者（Producer）")])]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("LPUSH")])]),t._v("：将订单消息推送到Redis的"),s("code",[t._v("order_queue")]),t._v("中。Redis的"),s("code",[t._v("LPUSH")]),t._v("命令将消息推送到列表的左侧，类似于在队列的头部插入消息。")]),t._v(" "),s("li",[t._v("生产者通过每隔1秒发送一个订单的方式，模拟异步发送任务的场景。")])]),t._v(" "),s("blockquote",[s("p",[t._v("消费者（Consumer）")])]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("BRPOP")])]),t._v("：消费者使用Redis的"),s("code",[t._v("BRPOP")]),t._v("命令从队列的右侧阻塞式地弹出消息。"),s("code",[t._v("BRPOP")]),t._v("会阻塞等待，直到有新消息进入队列，保证消费者不会忙轮询等待消息。")]),t._v(" "),s("li",[t._v("每个消费者处理完一个订单后，会继续等待下一个订单消息，模拟了异步任务处理的并发场景。")]),t._v(" "),s("li",[t._v("消费者是通过"),s("code",[t._v("go")]),t._v("关键字并发运行的，这意味着可以启动多个消费者来从同一个队列中并发处理消息。")])]),t._v(" "),s("blockquote",[s("p",[t._v("并发处理")])]),t._v(" "),s("ul",[s("li",[t._v("消费者"),s("code",[t._v("Consumer_1")]),t._v("和"),s("code",[t._v("Consumer_2")]),t._v("分别是两个独立的Go协程（Goroutine），它们从同一个Redis队列"),s("code",[t._v("order_queue")]),t._v("中获取订单消息。由于Redis队列的特性，消息只会被一个消费者获取并处理，从而实现了任务的并发分发和处理。")])]),t._v(" "),s("blockquote",[s("p",[t._v("优势")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("异步任务处理")]),t._v("：生产者将任务放入队列，消费者可以异步获取任务，双方不必同步等待。")]),t._v(" "),s("li",[s("strong",[t._v("松耦合")]),t._v("：生产者和消费者通过队列解耦，彼此独立，生产者只负责将任务放入队列，消费者可以在不同的时间获取和处理任务。")]),t._v(" "),s("li",[s("strong",[t._v("高可扩展性")]),t._v("：可以轻松通过增加更多消费者来提升任务处理的并发能力，保证系统在高并发场景下的性能。")]),t._v(" "),s("li",[s("strong",[t._v("可靠性")]),t._v("：Redis的持久化选项可以确保即使在系统崩溃的情况下，队列中的任务不会丢失。当然这里也可以用Kafka等其他消息队列中间件。")])]),t._v(" "),s("h2",{attrs:{id:"工作流引擎中的异步化实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作流引擎中的异步化实现"}},[t._v("#")]),t._v(" 工作流引擎中的异步化实现")]),t._v(" "),s("p",[t._v("如下图，每个触发器会创建execution实例。如果在触发时创建实例就立即存储到DB，可能会出现高频的上报数据导致数据库高负载。从而极大影响接口的性能，导致接口响应超时、并发度下降。")]),t._v(" "),s("p",[t._v("为了应付高频大量的调用场景，可以在触发器创建execution实例到落入数据库之间，通过增加消息队列进行存储，把任务异步化。后端通过worker集群进行消费，可以很好控制任务并发量，实现频率控制，降低DB的负载。")]),t._v(" "),s("p",[t._v("同时，针对不同的触发器类型，其生产的任务推送到不同的队列，避免出现类似api触发器大量任务阻碍了其他类型触发器的任务。")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:a(364),alt:"image-20231009094943277"}}),t._v(" "),s("p",[t._v("由于execution的主键uid是通过snowflake算法生成的，可以不使用数据库的自增长主键ID作为uid，减少了db的操作。接口的响应速度可以大大提升。")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:a(365),alt:"image-20230927124803024"}})])}),[],!1,null,null,null);s.default=r.exports}}]);